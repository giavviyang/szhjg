<template>
  <div>
    <el-dialog title="查看历史记录" width="90%" :visible.sync="dialogFormVisible" resize :before-close="beforeClose"
               remember :close-on-press-escape="false" :close-on-click-modal="false" :destroy-on-close="true"
               :append-to-body="true" class="dialog-style dialog-basic">
      <div class="dashboard-editor-container">
        <el-row :gutter="6" style="height: 100%">
          <!--左侧表单-->
          <el-col :span="12" style="height: calc(100vh - 100px)">
            <div class="chart-wrapper" style="white-space: nowrap; overflow-x: auto; overflow-y: hidden;">
              <div style="height: 40px;">
                <el-form :model="queryForm" ref="queryForm" size="small" :inline="true" v-hasPermi="['szhjg:xmpcgl:pcgl:search']">
                  <el-form-item label="项目名称" prop="projectId">
                    <el-input v-model="queryForm.projectName" :disabled="true" clearable style="width: 200px" class="rt-input"
                              size="mini"/>
                  </el-form-item>
                  <el-form-item label="批次名称" prop="nameId">
                    <el-input v-model="queryForm.nameId" placeholder="请输入查询内容" clearable style="width: 150px"
                              size="mini" @keyup.enter.native="batchSearch"/>
                  </el-form-item>
                  <el-form-item>
                    <el-button type="primary" icon="el-icon-search" size="mini" @click="batchSearch">搜索</el-button>
                  </el-form-item>
                </el-form>
              </div>
              <div style="height: calc(100% - 40px)">
                <!--批次表单信息-->
                <el-table row-key="id" :data="frameList" border width="100%" height="calc(100% - 40px)" ref="frameTable"
                          slot="table" @selection-change="frameSelectionChange" @row-click="frameRowClick" @select="frameSelect"
                          :row-style="frameClass">
                  <el-table-column type="selection" width="40"></el-table-column>
                  <el-table-column align="center" :index="frameGetIndex" type="index" label="序号"
                                   width="55"></el-table-column>
                  <el-table-column align="center" v-for="(item,index) in frameColumns" :key="index" :label="item.label"
                                   :prop="item.prop" :min-width="item.width" show-overflow-tooltip :formatter="item.formatter"/>
                </el-table>
                <div class="page" style="margin-top: 5px;">
                  <el-pagination :page-sizes="[20, 30, 50, 100]" :page-size="pageSize" :current-page="pageNum"
                                 layout="total, sizes, prev, pager, next, jumper" :total="totalA" @size-change="pageSizeS"
                                 @current-change="pageCurrent" :pager-count="5"/>
                </div>
              </div>
            </div>
          </el-col>
          <!--右侧表单-->
          <el-col :span="12" style="height: calc(100vh - 100px)">
            <div class="chart-wrapper" style="white-space: nowrap; overflow-x: auto; overflow-y: hidden;">
              <div style="height: 40px;">
                <el-form :model="queryForm" ref="queryForm" size="small" :inline="true"
                         style="margin-top: 0; margin-bottom: 0;">
                  <el-form-item label="批次名称" prop="pcName">
                    <el-input v-model="queryForm.pcName" :disabled="true" clearable style="width: 180px" class="rt-input"
                              size="mini"/>
                  </el-form-item>
                  <el-form-item label="档案类型" prop="dnName">
                    <el-input v-model="queryForm.dnName" :disabled="true" clearable style="width: 120px" class="rt-input"
                              size="mini"/>
                  </el-form-item>
                  <br>
                </el-form>
              </div>
              <div style="height: calc(100% - 40px)">
                <!--任务表单信息-->
                <div v-if="taskColumns.length<=0" class="taskColumnsFalse">暂无数据</div>
                <el-table v-else row-key="id" :data="taskList" border width="100%" height="calc(100% - 40px)" ref="taskTable"
                          slot="table"  @row-click="taskRowClick" @select="tasksSelect"
                          :row-style="taskClass">
                  <el-table-column type="selection" width="40"></el-table-column>
                  <el-table-column align="center" :index="taskGetIndex" type="index" label="序号" width="55"></el-table-column>
                  <el-table-column align="center" v-for="(item,index) in taskColumns" :key="index" :label="item.label"
                                   :prop="item.prop" :min-width="item.width" show-overflow-tooltip :formatter="item.formatter"/>
                  <el-table-column align="center" label="操作" width="120" fixed="right" class-name="operation">
                    <template slot-scope="scope">
                      <el-button type="text" size="mini"  @click="documentInspection(scope.row)">查看文件</el-button>
                    </template>
                  </el-table-column>
                </el-table>
                <div class="page" style="margin-top: 5px;">
                  <el-pagination :page-sizes="[20, 30, 50, 100]" :page-size="pageSizeB" :current-page="pageNumB"
                                 layout="total, sizes, prev, pager, next, jumper" :total="totalB" @size-change="pageSizeTask"
                                 @current-change="pageCurrentTask" :pager-count="5"/>
                </div>
              </div>
            </div>
          </el-col>
        </el-row>


        <!--文件,图片(图像)质检-->
        <el-dialog title="文件质检"  width="100%" :visible.sync="dialogTaskVisible" resize :before-close="filePictureClose"
                   remember :append-to-body="true" :close-on-press-escape="false" :close-on-click-modal="false"
                   :destroy-on-close="true" class="dialog-styleb dialog-basic">
          <!--左侧文件信息-->
          <el-col :span="5" style="background-color:rgb(255, 255, 255);border-right: 1px solid #dfe4ed">
            <div style="height:40px;padding:10px 10px 0 10px;display:flex;align-items:center;">
              <div class="form-basic" style="flex:1;">文件信息 :</div>
            </div>
            <div style="height: calc(100% - 40px);padding:5px 10px 10px 10px;">
              <el-table row-key="id" :data="jianFrameList" border height="calc(100vh - 195px)" slot="table" v-loading="loading"
                        ref="jianTable" @selection-change="jianSelectionChange" @row-click="jianRowClick" @select="jianSelect"
                        :row-style="jianClass" :default-expand-all="isExpandAll"
                        :tree-props="{children: 'children', hasChildren: 'hasChildren'}">
                <el-table-column type="selection" width="40" ></el-table-column>
                <el-table-column align="center" type="index" label="序号" width="50"></el-table-column>
                <el-table-column align="center" v-for="(item,index) in jianFrameColumns" :key="index" :label="item.label"
                                 :prop="item.prop" :min-width="item.width" show-overflow-tooltip :formatter="item.formatter">
                </el-table-column>
              </el-table>
            </div>
          </el-col>
          <!--中间文件详细详细-->
          <el-col :span="7" style="background-color:rgb(255, 255, 255);border-right: 1px solid #dfe4ed">
            <div type="border-card" style="height: calc(100vh - 140px);padding: 10px;overflow: auto;">
              <el-form ref="tablePapers" :model="tablePapers" :inline="true" :rules="PapersRules" label-width="120px">
                <br>
                <el-form-item v-for="(item, index) in papersItemList" :label="item.label" :key="index" :prop="item.prop">
                  <el-input v-model="tablePapers[item.prop]" :placeholder="item.placeholder"
                            :rules="item.rules" size="mini" :disabled="true" class="rt-input" style="width:200px"></el-input>
                </el-form-item>
              </el-form>
            </div>
          </el-col>
          <!--右侧图片-->
          <el-col :span="12" style="height: calc(100vh - 140px)">
            <div class="form-basicimg">
              <ImgViewr v-if="visible" :visible="visible" :lockScroll="false" :urls="urls" :initialIndex="index"
                        :on-show="onShow" :on-switch="changeHandle" :closeOnClickMask="false" :on-close="() => (visible = false)"/>
              <div class="imgtit" v-if="urls.length>0">当前第{{ index + 1 }}张,共有{{ urls.length }}张图片</div>
              <div class="imgtit" v-else>暂无图片</div>
            </div>
          </el-col>
        </el-dialog>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { queryProjectName } from '@/api/szhjg/xmpcgl/pcgl';
import { queryArchivesName, queryDisplayGx, selectPictureImage } from "@/api/szhjg/szhjgCommon";
import { queryCompletedBatchList, queryCompletedTaskList } from '@/api/szhjg/components/componentProject';
import { completeDynamicsList } from '@/api/szhjg/dynamicCommon';
import { completeDescriptionList } from "@/api/szhjg/dynamicCommon";
import { queryCasePiece } from "@/api/szhjg/sjjg/sjzj";
import ImgViewr, {showImages} from "vue-img-viewr";
import 'vue-img-viewr/styles/index.css'


const params = {
  pageNum: 1,
  pageSize: 20
}
export default {
  name: "CompletedProject",
  components: {ImgViewr},
  data() {
    return {
      //弹窗
      dialogFormVisible: false,
      dialogTaskVisible: false,

      // 遮罩层
      loading: true,

      //搜索
      queryForm: {
        projectId: '', nameId: '',
        pcName: '', dnName: '', projectName:'',
      },

      /*------------------------------        批次的参数       -------------------------------------------------------*/
      totalA: 0,
      pageNum: 1,
      pageSize: 20,
      //复选框选中
      framegridCheck: [],
      //项目名称下拉框
      projectNameOptions: [],
      //批次列表
      frameList: [],
      //批次表头
      frameColumns: [
        /*{label: '批次状态', prop: 'isfinished', width: '120'},*/
        {label: '批次名称', prop: 'pcName', width: '120'},
        {label: '批次描述', prop: 'pcMs', width: '250'},
        {label: '档案类型', prop: 'dalx', width: '100', formatter: this.dalxTypeOptions },
        {label: '保存路径', prop: 'prjFilepath', width: '200'},
        {label: '备份路径', prop: 'bakpath', width: '200'},
        {label: '创建人', prop: 'createBy', width: '100'},
        {label: '创建(开始)时间', prop: 'createTime', width: '150'},
        {label: '结束时间', prop: 'enddate', width: '150'},
      ],
      //存放批次id
      batchId: '',

      /*------------------------------        任务的参数      --------------------------------------------------------*/
      totalB: 0,
      pageNumB: 1,
      pageSizeB: 20,
      //复选框选中
      taskGridCheck: [],
      //任务列表
      taskList: [],
      //任务表头
      taskColumns: [],
      tableTask: {},
      TaskRules: {},
      //存放页面展示工序
      optionsProcedure: [],
      //存放动态输入框字段
      formItemList: [],
      //时间限制
      // pickerOptions: {
      //   disabledDate(time) {
      //     return time.getTime() > Date.now();
      //   },
      // },


      /**********************     文件(案件)和图片(图像)参数      *******************************************************/
      //案件复选框
      jianGridCheck: [],
      //列表
      jianFrameList: [],
      //表头
      jianFrameColumns: [
        {label: '件号', prop: 'jh', width: '80',
          formatter: function (row, column, cellValue) {
            if (row.sfsy === '是') {return row.jh;} else {return '';}
          }
        },
        {label: '页码', prop: 'ym', width: '50'},
        {label: '页数', prop: 'ys', width: '50'},
      ],

      //是否展开，默认全部折叠
      isExpandAll: false,
      papersItemList: [],    //文件(案件)
      tablePapers: {},       //文件存放表格字段
      PapersRules: {},       //文件存放验证规则

      //图片
      urls: [],
      index: 0,
      visible: false,

    }
  },
  methods: {
    //窗口初始化方法，nextTick方法可以添加逻辑，如打开窗口时查询数据填充
    init(bizId, projectName) {
      this.$nextTick(() => {
        this.queryForm.projectId = bizId;
        this.queryForm.projectName = projectName;
        this.dialogFormVisible = true;
        let params = {
          pageNum: 1,
          pageSize: 20,
          projectId: bizId,
        }
        this.queryProjectOptions();
        this.dalxQueryOptions();
        this.queryOptions();
        this.queryList(params)
      });
    },
    /***************************   批次的数据   ************************************************************************/
    //查询进行中项目名称
    queryProjectOptions() {
      queryProjectName().then(res => {
        this.projectNameOptions = res.map((item) => {
          return item
        })
      })
    },
    //上部搜索
    batchSearch() {
      this.pageNum = 1;
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcName: this.queryForm.nameId,
        projectId: this.queryForm.projectId,
      }
      this.queryList(params)
    },
    //分页
    pageCurrent(val) {
      this.pageNum = val
      params.pageNum = val
      params.pageSize = this.pageSize;
      params.projectId = this.queryForm.projectId;
      this.queryList(params)
    },
    pageSizeS(val) {
      this.pageSize = val
      params.pageSize = val;
      params.pageNum = this.pageNum;
      params.projectId = this.queryForm.projectId;
      this.queryList(params)
    },
    //查询数据展示页面
    queryList(params) {
      const _this = this
      queryCompletedBatchList(params, {emulateJSON: true})
        .then(function (response) {
          _this.frameList = response.rows
          _this.totalA = response.total
          _this.loading = false
        })
    },

    //查询档案名称字段
    dalxQueryOptions() {
      const dictType = "";
      queryArchivesName(dictType).then(res => {
        this.dalxOptions = res.map((item) => {
          return item;
        });
      });
    },
    //转换元数据字段
    dalxTypeOptions(row, column, cellValue) {
      let result;
      for (var i in this.dalxOptions) {
        if (cellValue == this.dalxOptions[i].value) {
          result = this.dalxOptions[i].label
        }
      }
      return result;
    },

    // 复选框事件
    frameSelectionChange(val) {
      this.framegridCheck = val;
      if (this.framegridCheck.length == 1) {
        this.transformField(this.framegridCheck[0]);
        this.getTableHeaders(this.framegridCheck[0]);
        this.batchId = this.framegridCheck[0].id;
        this.queryTaskId(this.batchId);
        this.getDynamicForm(this.framegridCheck[0]);
      }
    },
    //行点击事件
    frameRowClick(row, column, event) {
      this.taskColumns = [];
      //this.getTableHeaders(row)
      const selectData = this.framegridCheck;
      this.$refs.frameTable.clearSelection();
      if (selectData.length == 1) {
        selectData.forEach((item) => {
          //判断 如果当前的一行被勾选, 再次点击的时候就会取消选中
          if (item == row) {
            this.queryForm.pcName = "";
            this.queryForm.dnName = "";
            this.taskList = [];
            this.$refs.frameTable.toggleRowSelection(row, false);
          }
          //不然就让当前的一行勾选
          else {
            this.$refs.frameTable.toggleRowSelection(row, true);
          }
        });
      } else {
        this.$refs.frameTable.toggleRowSelection(row, true);
      }

      /*this.$refs.frameTable.clearSelection();
      if (this.framegridCheck.length === 0) {
        this.$refs.frameTable.toggleRowSelection(row)
        return;
      }
      this.$refs.frameTable.toggleRowSelection(row)*/
    },
    async frameSelect(selection, row) {
      //执行完清空操作在进行下面的勾选
      await this.$refs.frameTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.frameTable.toggleRowSelection(row, true);
    },
    frameClass({row, rowIndex}) {
      //更换被选中行的背景颜色，且不指定一tablebackground,这样hover取消掉了hover的黑认颜色
      if (this.framegridCheck.includes(row)) {
        return {
          "background": "#b9deff !important",
          "color": "blue",
        }
      } else {
        //没被选中的行hover颜色是初始颜色
        return {
          "——tablebackground": "#F5F7FA",
        }
      }
    },
    //翻页后序号连贯
    frameGetIndex($index) {
      //表格序号
      return (this.pageNum - 1) * this.pageSize + $index + 1;
    },

    //查询案卷动态表头展示字段
    getTableHeaders(row) {
      completeDynamicsList({headId: row.dalx}).then((res) => {
        this.taskColumns = res.data
      })
    },
    //查询文件动态展示字段
    getDynamicForm(row){
      this.papersItemList = []
      this.PapersRules = {}
      completeDescriptionList({headId: row.dalx}).then((res)=>{
        this.papersItemList = res.data
        // 根据后台返回的数据生成表单和验证规则
        this.papersItemList.forEach(item => {
          this.$set(this.tablePapers, item.prop, ''); // 设置表单数据默认值
        })
      })
    },


    /***************************   任务管理的数据   ********************************************************************/
    //查询页面动态展示工序名称列表
    queryOptions() {
      queryDisplayGx().then(res => {
        this.optionsProcedure = res.map((item) => {
          return item;
        });
      });
    },

    //转换任务展示字段名称
    transformField(val){
      this.queryForm.pcName = val.pcName;
      let result;
      for (var i in this.dalxOptions) {
        if (val.dalx == this.dalxOptions[i].value) {
          result = this.dalxOptions[i].label
        }
      }
      this.queryForm.dnName = result;
    },
    //查询任务列表
    queryTaskId(val) {
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcId: val,
      }
      this.queryTaskList(params)
    },
    queryTaskList(params) {
      const _this = this
      queryCompletedTaskList(params, {emulateJSON: true}).then(function (response) {
        if(response.rows != undefined && response.rows != "" && response.rows != null){
          response.rows.forEach((value, index) => {
            const arr = _this.optionsProcedure;
            for (var i in arr) {
              if (value.dqgx == arr[i].value) {
                value.dqgx = arr[i].label;
              }
            }
          })
        }
        _this.taskList = response.rows;
        _this.totalB = response.total;
        _this.loading = false;
      })
    },
    //分页
    pageCurrentTask(val) {
      this.pageNumB = val
      params.pageNum = val
      params.pageSize = this.pageSizeB;
      params.pcId = this.batchId;
      this.queryTaskList(params)
    },
    pageSizeTask(val) {
      this.pageSizeB = val
      params.pageSize = val;
      params.pageNum = this.pageNumB;
      params.pcId = this.batchId;
      this.queryTaskList(params)
    },
    // 复选框事件
    taskSelectionChange(val) {
      this.taskGridCheck = val;
    },
    // 行点击事件
    taskRowClick(row, column, event) {
      const selectData = this.taskGridCheck;
      this.$refs.taskTable.clearSelection();
      if (selectData.length == 1) {
        selectData.forEach((item) => {
          //判断 如果当前的一行被勾选, 再次点击的时候就会取消选中
          if (item == row) {
            this.$refs.taskTable.toggleRowSelection(row, false);
          }
          //不然就让当前的一行勾选
          else {
            this.$refs.taskTable.toggleRowSelection(row, true);
          }
        });
      } else {
        this.$refs.taskTable.toggleRowSelection(row, true);
      }
    },
    async tasksSelect(selection, row) {
      //执行完清空操作在进行下面的勾选
      await this.$refs.taskTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.taskTable.toggleRowSelection(row, true);
    },
    taskClass({row, rowIndex}) {
      if (this.taskGridCheck.includes(row)) {
        return {
          "background": "#b9deff !important", "color": "blue",
        }
      } else {
        return {
          "——tablebackground": "#F5F7FA",
        }
      }
    },
    //翻页后序号连贯
    taskGetIndex($index) {
      //表格序号
      return (this.pageNumB - 1) * this.pageSizeB + $index + 1;
    },


    //关闭页面弹窗 ----批次和任务弹窗页面
    beforeClose(){
      this.queryForm = { nameId: '', pcName: '', dnName: '',};
      this.taskColumns = [];
      this.taskList = [];
      this.dialogFormVisible = false;
    },



    /*************************     文件(案件)和图片(图像)的数据      ****************************************************/
    //打开文件/图片弹窗
    documentInspection(val){
      this.queryCaseList(val.id)
      this.dialogTaskVisible = true;
    },
    //查询文件信息
    queryCaseList(val){
      const _this = this
      let params = {
        ajId:val,
      }
      queryCasePiece(params, {emulateJSON: true}).then(function (response) {
        _this.jianFrameList = response.rows;
        _this.loading = false;
      })
    },

    //复选框事件
    jianSelectionChange(val) {
      this.jianGridCheck = val;
      if (this.jianGridCheck.length == 1){
        if (this.jianGridCheck[0].sfsy==="是"){
          this.getImage(this.jianGridCheck[0]);
          this.tablePapers = this.jianGridCheck[0];
        }else {
          this.leafletImage(this.jianGridCheck[0]);
        }
      }
    },
    //行点击事件
    jianRowClick(row, column) {
      this.$refs.jianTable.clearSelection();
      if (this.jianGridCheck.length === 0) {
        this.$refs.jianTable.toggleRowSelection(row)
        return;
      }
      this.$refs.jianTable.toggleRowSelection(row)
    },
    async jianSelect(selection, row) {
      // 执行完清空操作在进行下面的勾选
      await this.$refs.jianTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.jianTable.toggleRowSelection(row, true);
    },
    jianClass( { row,rowIndex }) {
      if (this.jianGridCheck.includes(row)){
        return {"background":"#b9deff !important", "color": "blue",}
      } else if (row['sfsy'] === '是') {
        return {
          "background": "#fbe3ff !important",
        }
      }
    },

    // 通过组件方式
    showImagesByComponent(index) {
      this.visible = true
      this.index = index|0
    },
    onShow(isShow) {
      //console.log(isShow)
    },
    changeHandle(i) {
      this.index = i
      //console.log(`current image index: ${i}`)
    },
    showImagesByJs(index) {
      // 通过js方式显示
      showImages({
        urls: this.urls,
        index,
        onShow: this.onShow,
        /*onClose: () => {
          console.log('close with js')
          return true
        },*/
      })
    },

    //查看图片
    getImage(row){
      selectPictureImage({jh:row.jh,ajId:row.ajId}).then((res)=>{
        this.urls = res.data.imgs.map((item, index) => {
          return `${process.env.VUE_APP_BASE_API}/szhjgCommonController/ioReadImg2?url=${encodeURIComponent(item)}`;
        });
        this.showImagesByComponent()
      })
    },
    //查看单张图片
    leafletImage(row){
      this.urls = [`${process.env.VUE_APP_BASE_API}/szhjgCommonController/ioReadImg2?url=${encodeURIComponent(row.tpdz)}`];
      this.showImagesByComponent();
    },

    //文件/图片关闭页面弹窗
    filePictureClose(){
      this.tablePapers = {};
      this.urls = [];
      this.index = 0;
      this.dialogTaskVisible = false;
    },


  }
}
</script>

<style scoped lang="scss">
//div样式
.dashboard-editor-container {
  //padding: 5px;
  width: 100%;
  height: 100%;
  //background-color: rgb(240, 242, 245);
  background-color: #cccccc;
  position: relative;

  .github-corner {
    position: absolute;
    top: 0;
    border: 0;
    right: 0;
  }

  .chart-wrapper {
    background: #ffffff;
    padding: 10px 10px 0 10px;
    //margin-bottom: 10px;
    height: 100%;
    border-radius: 8px;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1)
  }
}

//弹框样式
.dialog-style {
  ::v-deep .el-dialog__body {
    padding: 5px;
    background-color: #cccccc;
  }
  ::v-deep .el-dialog__header {
    background: rgba(204, 204, 204, 0.18);
    padding: 10px;
  }
  ::v-deep .el-dialog__title {
    font-weight: 500;
    font-size: 15px
  }
  ::v-deep .el-dialog__headerbtn {
    top: 13px;
  }
  ::v-deep .el-dialog__footer {
    background: rgba(204, 204, 204, 0.18);
    padding-right: 15px;
    padding: 8px;
  }
  ::v-deep .el-button + .el-button {
    margin-left: 6px;
  }
}
.dialog-styleb {
  ::v-deep .el-dialog__body {
    padding: 0px;
    background-color: #cccccc;
  }
  ::v-deep .el-dialog__header {
    background: rgba(204, 204, 204, 0.18);
    padding: 10px;
  }
  ::v-deep .el-dialog__title {
    font-weight: 500;
    font-size: 15px
  }
  ::v-deep .el-dialog__headerbtn {
    top: 13px;
  }
  ::v-deep .el-dialog__footer {
    background: rgba(204, 204, 204, 0.18);
    padding-right: 15px;
    padding: 8px;
  }
  ::v-deep .el-button + .el-button {
    margin-left: 6px;
  }
}
// 基本信息弹框
.dialog-basic {
  margin-left: 10px;
  .form-basic {
    margin-bottom: 5px;
    line-height: 25px;
    border-bottom: 1px solid #ccc;
    //margin-left: 15px;
    //margin-right: 15px;
    font-size: 14px;
    font-weight: bold;
  }

  .form-basicimg{
    position: relative;
    height: 100%;
    //margin-bottom: 5px;
    line-height: 25px;
    //border-bottom: 1px solid #ccc;
    //margin-left: 15px;
    //margin-right: 15px;
    font-size: 14px;
    font-weight: bold;
    .img-viewr__wrapper{
      position: absolute;
    }
    ::v-deep .icon__circle-close{
      display: none;
    }
    ::v-deep .img-viewr__canvas{
      overflow: hidden;
    }
    .imgs {
      display: flex;
    }
    .img {
      width: 150px;
      height: 100px;
      border: 1px solid #EEE;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 20px;
    }
    .img img {
      max-width: 100%;
      max-height: 100%;
      cursor: pointer;
    }

    .imgtit {
      position: absolute;
      width: 100%;
      z-index: 999999;
      text-align: center;
      bottom: 5px;
      font-size:17px;
      font-weight: 700;
      text-shadow: -1px 1px 0 #fff, 1px 1px 0 #fff, 1px -1px 0 #fff, -1px -1px 0 #fff;
    }
  }

}
//弹窗样式修改
::v-deep .el-dialog {
  display: flex;
  flex-direction: column;
  margin: 0 !important;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  max-height: calc(100% - 30px);
  max-width: calc(100% - 30px);
}

::v-deep .el-table {
  //border-right: 1px solid #dfe6ec;
  border: 1px solid #dfe6ec;
  color: #515a6e;
  th {
    height: 34px !important;
  }
  & > .el-table__header-wrapper {
    & > table {
      tr:first-of-type {
        th {
          background: rgba(204, 204, 204, 0.18);
          color: #515a6e;
          font-size: 12px;
          text-align: center;
          height: 34px !important;
          padding: 5px 0 !important;
          border-right: 1px solid #dfe6ec;
        }
      }
      tr:nth-of-type(2) {
        th {
          background: #fff;
          color: #515a6e;
          font-size: 12px;
          text-align: center;
          padding: 0 !important;
          height: 34px;
          .el-input__inner {
            border: none;
            padding: 0;
            height: 20px;
          }
          .el-input__suffix {
            width: 12px;
            .el-input__icon {
              //line-height: 23px;
            }
          }
        }
      }
      //& > colgroup {
      //  col {
      //    &:last-of-type {
      //      width: 17px !important;
      //    }
      //  }
      //}
    }
  }
  .el-table__body-wrapper {
    //overflow: auto !important;
    .el-table__row {
      td {
        text-align: center;
        padding: 5px 0 !important;
        font-size: 12px;
        border-right: 1px solid #dfe6ec;
        .el-input.is-disabled .el-input__inner {
          color: #606266;
        }
        .el-radio {
          margin-right: 20px;
          font-size: 12px;
          .el-radio__input {
            .el-radio__inner {
              width: 10px;
              height: 10px;
            }
          }
          .el-radio__label {
            font-size: 12px;
            padding-left: 5px;
            font-weight: 400;
          }
        }
        .el-radio:last-of-type {
          margin-right: 0;
        }
      }
      .textLeft {
        text-align: left;
      }
      .el-table-column--selection {
        .cell {
          padding-right: 10px;
        }
      }
      .operation {
        .cell {
          display: flex;
          justify-content: space-around;
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          .el-button {
            //width: 100%;
            height: 100%;
            position: relative;
            top: 0;
            right: 0;
            margin: 0 2px;
            font-size: 12px;
          }
        }
      }
    }
    .small-padding {
      .cell {
        color: #515a6e;
      }
    }
    .noticeType {
      .el-tag {
        background-color: transparent;
        color: #515a6e;
        border: none;
      }
    }
  }

  .el-table__fixed {
    height: 100% !important; //设置高优先，以覆盖内联样式
  }
  .el-table__fixed-right {
    height: 100%;
    .el-table__fixed-header-wrapper {
      .operation {
        .cell {
          text-align: center;
          color: #515a6e;
        }
      }
    }
    .el-table__fixed-body-wrapper {
      .operation {
        padding:5px;
        .cell {
          display: flex;
          justify-content: space-around;
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          //color: #515a6e;
          .el-button {
            //width: 100%;
            height: 100%;
            position: relative;
            top: 0;
            right: 0;
            margin: 0 2px;
            font-size: 12px;
          }
        }
      }
    }
  }
  .el-table__cell {
    padding:0 ;
  }
  .cell{
    line-height: 19px;
  }
}
.el-table--medium{
  .el-table__cell {
    padding:0;
  }
}

::v-deep .taskColumnsFalse{
  width: 100%;
  height: calc(100% - 40px);
  border: 1px solid #ddd;
  display: flex;
  justify-content: center;
  align-items: center;
  color:#dfe6ec;
}

.page {
  float: right;
  height: 38px;
  text-align: right;

  ::v-deep .el-pagination {
    height: 28px;
    //position: relative;
    //margin-top: 5px;
    font-size: 12px;

    & > .el-pagination__total {
      font-size: 12px;
    }

    & > .el-pagination__sizes {
      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }

    button {
      background-color: transparent;
    }

    & > .el-pager {
      li {
        font-size: 12px;
        background-color: transparent;
      }
    }

    & > .el-pagination__jump {
      font-size: 12px;

      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }
  }
}

.rt-input ::v-deep .el-input__inner {
  color: #000000;
}

</style>

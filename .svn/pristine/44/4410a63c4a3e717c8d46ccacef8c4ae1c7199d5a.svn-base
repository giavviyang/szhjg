<template>
  <div class="dashboard-editor-container">
    <el-row :gutter="6">
      <!--左侧表单-->
      <el-col :span="12" style="height: calc(100vh - 100px)">
        <div class="chart-wrapper">
          <el-form :model="queryForm" ref="queryForm" size="small" :inline="true" v-hasPermi="['szhjg:xmpcgl:pcgl:search']">
            <el-form-item label="选择项目" prop="projectId">
              <el-select v-model="queryForm.projectId" placeholder="选择项目名称" size="mini" clearable
                         style="width: 120px" @change="batchSearch($event)">
                <el-option v-for="item in projectNameOptions" :key="item.value" :label="item.label"
                           :value="item.value"/>
              </el-select>
            </el-form-item>
            <el-form-item label="批次名称" prop="nameId">
              <el-input v-model="queryForm.nameId" placeholder="请输入查询内容" clearable style="width: 150px"
                        size="mini" @keyup.enter.native="batchSearch"/>
            </el-form-item>
            <el-form-item>
              <el-button type="primary" icon="el-icon-search" size="mini" @click="batchSearch">搜索</el-button>
            </el-form-item>
          </el-form>
          <el-row :gutter="10" class="mb8">
            <el-col :span="1.5">
              <el-button type="primary" plain icon="el-icon-plus" size="mini" @click="batchAdd"
                         v-hasPermi="['szhjg:xmpcgl:pcgl:addBatch']">新增批次</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="success" plain icon="el-icon-edit" size="mini" @click="batchUpdate"
                         v-hasPermi="['szhjg:xmpcgl:pcgl:updataBatch']">修改</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="danger" plain icon="el-icon-delete" size="mini" @click="batchDelete"
                         v-hasPermi="['szhjg:xmpcgl:pcgl:deleteBatch']">删除</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="info" plain icon="el-icon-circle-check" size="mini" @click="batchComplete"
                         v-hasPermi="['szhjg:xmpcgl:pcgl:complete']">完成
              </el-button>
            </el-col>
          </el-row>
          <!--批次表单信息-->
          <el-table row-key="id" :data="frameList" border width="100%" height="calc(100vh - 230px)" ref="frameTable"
                    slot="table" @selection-change="frameSelectionChange" @row-click="frameRowClick" @select="frameSelect"
                    :row-style="frameClass">
            <el-table-column type="selection" width="40"></el-table-column>
            <el-table-column align="center" :index="frameGetIndex" type="index" label="序号"
                             width="55"></el-table-column>
            <el-table-column align="center" v-for="(item,index) in frameColumns" :key="index" :label="item.label"
                             :prop="item.prop" :min-width="item.width" show-overflow-tooltip :formatter="item.formatter"/>
          </el-table>
          <div class="page" style="margin-top: 5px;">
            <el-pagination :page-sizes="[20, 30, 50, 100]" :page-size="pageSize" :current-page="pageNum"
                           layout="total, sizes, prev, pager, next, jumper" :total="totalA" @size-change="pageSizeS"
                           @current-change="pageCurrent" :pager-count="5"/>
          </div>
        </div>
      </el-col>
      <!--右侧表单-->
      <el-col :span="12" style="height: calc(100vh - 100px)">
        <div class="chart-wrapper">
          <el-form :model="queryForm" ref="queryForm" size="small" :inline="true"
                   style="margin-top: 0; margin-bottom: 0;">
            <el-form-item label="批次名称" prop="pcName">
              <el-input v-model="queryForm.pcName" :disabled="true" clearable style="width: 180px" class="rt-input"
                        size="mini"/>
            </el-form-item>
            <el-form-item label="档案类型" prop="dnName">
              <el-input v-model="queryForm.dnName" :disabled="true" clearable style="width: 120px" class="rt-input"
                        size="mini"/>
            </el-form-item>
            <br>
          </el-form>
          <el-row :gutter="10" class="mb8">
            <el-col :span="1.5">
              <el-button type="primary" plain icon="el-icon-plus" size="mini" @click="taskAdd"
                         v-hasPermi="['szhjg:xmpcgl:pcgl:addTask']">新增任务</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="success" plain icon="el-icon-edit" size="mini" @click="taskUpdate"
                         v-hasPermi="['szhjg:xmpcgl:pcgl:updataTask']">修改</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="danger" plain icon="el-icon-delete" size="mini" @click="taskDelete"
                         v-hasPermi="['szhjg:xmpcgl:pcgl:deleteTask']">删除</el-button>
            </el-col>
          </el-row>
          <!--任务表单信息-->
          <div v-if="taskColumns.length<=0" class="taskColumnsFalse">暂无数据</div>
          <el-table v-else row-key="id" :data="taskList" border width="100%" height="calc(100vh - 230px)" ref="taskTable"
                    slot="table" @selection-change="taskSelectionChange" @row-click="taskRowClick" @select="tasksSelect"
                    :row-style="taskClass">
            <el-table-column type="selection" width="40"></el-table-column>
            <el-table-column align="center" :index="taskGetIndex" type="index" label="序号"
                             width="55"></el-table-column>
            <el-table-column align="center" v-for="(item,index) in taskColumns" :key="index" :label="item.label"
                             :prop="item.prop" :min-width="item.width" show-overflow-tooltip :formatter="item.formatter"/>
          </el-table>
          <div class="page" style="margin-top: 5px;">
            <el-pagination :page-sizes="[20, 30, 50, 100]" :page-size="pageSizeB" :current-page="pageNumB"
                           layout="total, sizes, prev, pager, next, jumper" :total="totalB" @size-change="pageSizeTask"
                           @current-change="pageCurrentTask" :pager-count="5"/>
          </div>
        </div>
      </el-col>

      <!--批次新增/编辑-->
      <el-dialog :title="frameDialogType1=='add'?'新增批次':frameDialogType1=='edit'?'编辑批次':''" width="620px"
                 :visible.sync="dialogFormVisible1" :close-on-click-modal="false" :close-on-press-escape="false"
                 :destroy-on-close="true" :append-to-body="true" class="dialog-style dialog-basic">
        <el-form ref="tableForm" :model="tableForm" :inline="true" :rules="formRules" label-width="80px">
          <br>
          <el-row>
            <el-col :span="12">
              <el-form-item label="选择项目" prop="projectId">
                <el-select v-model="tableForm.projectId" placeholder="请选择项目名称" size="mini" clearable style="width:200px">
                  <el-option v-for="item in projectNameOptions" :key="item.value" :label="item.label"
                             :value="item.value"/>
                </el-select>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="批次名称" prop="pcName">
                <el-input v-model="tableForm.pcName" placeholder="请输入批次名称" clearable size="mini"
                          style="width:200px"/>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="24">
              <el-form-item label="批次描述" prop="pcMs">
                <el-input v-model="tableForm.pcMs" type="textarea" placeholder="" clearable size="mini"
                          style="width:500px"/>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row>
            <el-col :span="12">
              <el-form-item label="保存路径" prop="prjFilepath">
                <el-input v-model="tableForm.prjFilepath" placeholder="" clearable size="mini" style="width:200px"/>
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item label="备份路径" prop="bakpath">
                <el-input v-model="tableForm.bakpath" placeholder="" clearable size="mini" style="width:200px"/>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
        <div slot="footer" class="dialog-footer">
          <el-button size="mini" plain @click="dialogFormVisible1=false">取 消</el-button>
          <el-button size="mini" plain type="primary" @click="submitFormBatch('tableForm')">保 存</el-button>
        </div>
      </el-dialog>

      <!--任务新增/编辑-->
      <el-dialog :title="frameDialogType2=='add'?'新增任务':frameDialogType2=='edit'?'编辑任务':''"  width="650px"
                 :visible.sync="dialogFormVisible2" :close-on-click-modal="false" :close-on-press-escape="false"
                 :destroy-on-close="true" :append-to-body="true" class="dialog-style dialog-basic">
        <el-form ref="tableTask" :model="tableTask" :inline="true" :rules="TaskRules" label-width="90px">
          <br>
          <el-form-item v-for="(item, index) in formItemList" :label="item.label" :key="index" :prop="item.prop">
            <el-input v-if="item.type == 'input'" v-model="tableTask[item.prop]" :placeholder="item.placeholder"
                      :rules="item.rules" size="mini" style="width:200px" :disabled="item.disabled" class="rt-input"
                      @blur="updateBH"></el-input>
            <el-select v-if="item.type == 'select'" v-model="tableTask[item.prop]" placeholder="请选择" size="mini"
                       style="width:200px" @blur="updateBH">
              <el-option v-for="items in item.options" :key="items.value" :label="items.label" :value="items.value"
                :rules="items.rules">
              </el-option>
            </el-select>
            <el-date-picker v-if="item.type == 'date'" v-model="tableTask[item.prop]" clearable size="mini"
                            :placeholder="item.placeholder" type="date" value-format="yyyy-MM-dd HH:mm:ss"
                            :picker-options="pickerOptions" :rules="item.rules" style="width:200px" @blur="updateBH"/>
            <!-- 其他表单项类型 -->
          </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
          <el-button size="mini" plain @click="dialogFormVisible2=false">取 消</el-button>
          <el-button size="mini" plain type="primary" @click="insertTaskOne('tableTask')">保 存</el-button>
        </div>
      </el-dialog>

    </el-row>
  </div>
</template>

<script>
import SlotTable from "@/components/public/table/SlotTable";
import TablePage from "@/components/public/table/TablePage";
import {Message} from "element-ui";
import { queryProjectName } from '@/api/szhjg/xmpcgl/pcgl';
import { queryArchivesName, queryDisplayGx } from "@/api/szhjg/szhjgCommon";
import { queryBatchList, insertOneBatch, updateOneBatch, deleteOneBatch, completeBatch } from '@/api/szhjg/xmpcgl/pcgl';
import { queryBatchTaskList } from '@/api/szhjg/xmpcgl/pcgl';
import { headDisplayList } from '@/api/szhjg/dynamicCommon';
import { insertOneTask, updateOneTask, deleteOneTask } from '@/api/szhjg/rwgl/rwgl';
import { queryNumberedComposition, checkTaskCount } from "@/api/szhjg/rwgl/rwgl";

const params = {
  pageNum: 1,
  pageSize: 20
}
export default {
  name: "index",
  components: {TablePage, SlotTable},
  data() {
    return {
      //弹窗
      dialogFormVisible1: false, //批次弹窗
      dialogFormVisible2: false, //任务弹窗
      dialogFormVisible3: false, //批量新增弹窗
      dialogFormVisible4: false, //批量导入弹窗
      dialogFormVisible5: false, //文件条目导入弹窗
      //默认新增状态
      frameDialogType1: 'add',  //批次新增
      frameDialogType2: 'add',  //任务新增

      // 遮罩层
      loading: true,
      //搜索
      queryForm: {
        projectId: '', nameId: '',
        pcName: '', dnName: '',
      },
      //查询档案字段
      dalxOptions: [],

      /*------------------------------        批次的参数       -------------------------------------------------------*/
      totalA: 0,
      pageNum: 1,
      pageSize: 20,
      //复选框选中
      framegridCheck: [],
      //项目名称下拉框
      projectNameOptions: [],
      //批次列表
      frameList: [],
      //批次表头
      frameColumns: [
        /*{label: '批次状态', prop: 'isfinished', width: '120'},*/
        {label: '批次名称', prop: 'pcName', width: '120'},
        {label: '批次描述', prop: 'pcMs', width: '250'},
        {label: '档案类型', prop: 'dalx', width: '120', formatter: this.dalxTypeOptions },
        {label: '保存路径', prop: 'prjFilepath', width: '200'},
        {label: '备份路径', prop: 'bakpath', width: '200'},
        {label: '创建人', prop: 'createBy', width: '100'},
        {label: '创建(开始)时间', prop: 'createTime', width: '150'},
        {label: '结束时间', prop: 'enddate', width: '150'},
      ],
      tableForm: {
        projectId: '', pcName: '', pcMs: '', prjFilepath: '', bakpath: '',
      },
      formRules: {
        projectId: [
          {required: true, message: '项目不能为空', trigger: 'blur'},
        ],
        pcName: [
          {required: true, message: '批次名称不能为空', trigger: 'blur'},
          {min: 0, max: 20, message: '批次名称不得超过20', trigger: 'blur'},
        ],
        pcMs: [
          {required: true, message: '批次描述不能为空', trigger: 'blur'},
          {min: 0, max: 200, message: '批次描述长度不得超过200', trigger: 'blur'},
        ],
        prjFilepath: [
          {required: true, message: '保存路径不能为空', trigger: 'blur'},
        ],
        bakpath: [
          {required: true, message: '备份路径不能为空', trigger: 'blur'},
        ],
      },
      //存放批次id
      batchId: '',

      /*------------------------------        任务的参数      --------------------------------------------------------*/
      totalB: 0,
      pageNumB: 1,
      pageSizeB: 20,
      //复选框选中
      taskGridCheck: [],
      //任务列表
      taskList: [],
      //任务表头
      taskColumns: [],
      tableTask: {},
      TaskRules: {},
      //存放页面展示工序
      optionsProcedure: [],
      //存放动态输入框字段
      formItemList: [],
      //时间限制
      pickerOptions: {
        disabledDate(time) {
          return time.getTime() > Date.now();
        },
      },

      //获取编号组成功能
      compositionLists:[],
      //重名验证
      chongMingFlag: '',

    }
  },

  mounted() {
    this.queryForm.projectId = this.$route.query.id;
    params.projectId = this.queryForm.projectId;
    this.queryList(params);
  },
  created() {
    this.queryProjectOptions();
    this.dalxQueryOptions();
    this.queryOptions();
  },

  methods: {
    /***************************   批次的数据   ************************************************************************/
    //查询进行中项目名称
    queryProjectOptions() {
      queryProjectName().then(res => {
        this.projectNameOptions = res.map((item) => {
          return item
        })
      })
    },
    //上部搜索
    batchSearch() {
      this.pageNum = 1;
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcName: this.queryForm.nameId,
        projectId: this.queryForm.projectId,
      }
      this.queryList(params)
    },
    //分页
    pageCurrent(val) {
      this.pageNum = val
      params.pageNum = val
      params.pageSize = this.pageSize;
      this.queryList(params)
    },
    pageSizeS(val) {
      this.pageSize = val
      params.pageSize = val;
      params.pageNum = this.pageNum;
      this.queryList(params)
    },
    //查询数据展示页面
    queryList(params) {
      const _this = this
      queryBatchList(params, {emulateJSON: true})
        .then(function (response) {
          _this.frameList = response.rows
          _this.totalA = response.total
          _this.loading = false
        })
    },

    //查询档案名称字段
    dalxQueryOptions() {
      const dictType = "";
      queryArchivesName(dictType).then(res => {
        this.dalxOptions = res.map((item) => {
          return item;
        });
      });
    },
    //转换元数据字段
    dalxTypeOptions(row, column, cellValue) {
      let result;
      for (var i in this.dalxOptions) {
        if (cellValue == this.dalxOptions[i].value) {
          result = this.dalxOptions[i].label
        }
      }
      return result;
    },

    // 复选框事件
    frameSelectionChange(val) {
      this.framegridCheck = val;
      if (this.framegridCheck.length == 1) {
        this.transformField(this.framegridCheck[0]);
        this.getTableHeaders(this.framegridCheck[0]);
        this.batchId = this.framegridCheck[0].id;
        this.queryTaskId(this.batchId);
        this.getDynamicForm(this.framegridCheck[0]);
        this.queryNumberedList(this.batchId);
      }
    },
    //行点击事件
    frameRowClick(row, column, event) {
      this.taskColumns = [];
      //this.getTableHeaders(row)
      const selectData = this.framegridCheck;
      this.$refs.frameTable.clearSelection();
      if (selectData.length == 1) {
        selectData.forEach((item) => {
          //判断 如果当前的一行被勾选, 再次点击的时候就会取消选中
          if (item == row) {
            this.queryForm.pcName = "";
            this.queryForm.dnName = "";
            this.taskList = [];
            this.$refs.frameTable.toggleRowSelection(row, false);
          }
          //不然就让当前的一行勾选
          else {
            this.$refs.frameTable.toggleRowSelection(row, true);
          }
        });
      } else {
        this.$refs.frameTable.toggleRowSelection(row, true);
      }

      /*this.$refs.frameTable.clearSelection();
      if (this.framegridCheck.length === 0) {
        this.$refs.frameTable.toggleRowSelection(row)
        return;
      }
      this.$refs.frameTable.toggleRowSelection(row)*/
    },
    async frameSelect(selection, row) {
      //执行完清空操作在进行下面的勾选
      await this.$refs.frameTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.frameTable.toggleRowSelection(row, true);
    },
    frameClass({row, rowIndex}) {
      //更换被选中行的背景颜色，且不指定一tablebackground,这样hover取消掉了hover的黑认颜色
      if (this.framegridCheck.includes(row)) {
        return {
          "background": "#b9deff !important",
          "color": "blue",
        }
      } else {
        //没被选中的行hover颜色是初始颜色
        return {
          "——tablebackground": "#F5F7FA",
        }
      }
    },
    //翻页后序号连贯
    frameGetIndex($index) {
      //表格序号
      return (this.pageNum - 1) * this.pageSize + $index + 1;
    },
    //查询动态表头展示字段
    getTableHeaders(row) {
      headDisplayList({headId: row.dalx, headPoints: 0, headType: 0}).then((res) => {
        this.taskColumns = res.data
      })
    },

    //批次新增
    batchAdd() {
      this.frameDialogType1 = 'add';
      this.tableForm = {projectId: '', pcName: '', pcMs: '', prjFilepath: '', bakpath: '',}
      this.dialogFormVisible1 = true;
    },
    submitFormBatch(tableForm) {
      const _this = this;
      this.$refs["tableForm"].validate((valid) => {
        if (valid) {
          if (this.frameDialogType1 === 'add') {
            insertOneBatch(this.tableForm).then(response => {
              if (response.code == "200") {
                _this.$message({message: "批次新增成功", type: 'success'})
                _this.reset();
                _this.dialogFormVisible1 = false;
              } else {
                this.$message({message: "批次新增失败", type: 'error'});
              }
            });
          }
          if (this.frameDialogType1 === 'edit') {
            updateOneBatch(this.tableForm).then(response => {
              if (response.code == "200") {
                this.$message({message: "批次修改成功", type: 'success'})
                _this.reset();
                _this.dialogFormVisible1 = false;
              } else {
                this.$message({message: "批次修改失败", type: 'error'});
              }
            });
          }
        } else {
          return false;
        }
      })
    },
    //批次编辑
    batchUpdate() {
      if (this.framegridCheck.length <= 0) {
        Message.warning("请选择要修改的数据");
        return false
      }
      if (this.framegridCheck.length > 1) {
        Message.warning("请选择一条数据进行修改");
        return false
      }
      if (this.framegridCheck.length == 1) {
        this.tableForm = JSON.parse(JSON.stringify(this.framegridCheck[0]));
        this.dialogFormVisible1 = true;
        this.frameDialogType1 = 'edit';
      }
    },
    //批次删除
    batchDelete() {
      if (this.framegridCheck.length <= 0) {
        Message.warning("请选择要删除的数据");
        return false
      }
      if (this.framegridCheck.length > 1) {
        Message.warning("请选择一条数据进行删除");
        return false
      }
      if (this.framegridCheck.length == 1) {
        this.$confirm('此操作将删除选中数据,是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          const _this = this;
          let id = this.framegridCheck[0].id;
          deleteOneBatch(id).then((response) => {
            if (response.code == 200) {
              this.$message({message: "批次删除成功", type: 'success'})
              _this.reset();
            } else {
              this.$message({message: "批次删除失败", type: 'error'});
            }
          })
        }).catch(() => {});
      }
    },
    //完成批次
    batchComplete() {
      if (this.framegridCheck.length <= 0) {
        Message.warning("请选择要完成的数据");
        return false
      }
      if (this.framegridCheck.length > 1) {
        Message.warning("请选择一条数据进行提交");
        return false
      }
      if (this.framegridCheck.length == 1) {
        this.$confirm('此操作将结束该批次,不可撤销,是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          const _this = this;
          let id = this.framegridCheck[0].id;
          completeBatch({id: id}).then((response) => {
            if (response.code == 200) {
              _this.$message({message: "批次完成提交成功", type: 'success'})
              _this.reset();
            } else {
              this.$message({message: "批次完成提交失败", type: 'error'});
            }
          })
        }).catch(() => {
        });
      }
    },
    //新增/编辑/删除之后页面查询列表
    reset() {
      this.queryForm.pcName = '';
      this.queryForm.dnName = '';
      this.taskList = [];
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcName: this.queryForm.nameId,
        projectId: this.queryForm.projectId,
      }
      this.queryList(params);
      this.tableForm = {pcName: '', pcMs: '', prjFilepath: '', bakpath: '',}
    },


    /***************************   任务管理的数据   ********************************************************************/
    //查询页面动态展示工序名称列表
    queryOptions() {
      queryDisplayGx().then(res => {
        this.optionsProcedure = res.map((item) => {
          return item;
        });
      });
    },

    //转换任务展示字段名称
    transformField(val){
      this.queryForm.pcName = val.pcName;
      let result;
      for (var i in this.dalxOptions) {
        if (val.dalx == this.dalxOptions[i].value) {
          result = this.dalxOptions[i].label
        }
      }
      this.queryForm.dnName = result;
    },
    //查询任务列表
    queryTaskId(val) {
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcId: val,
      }
      this.queryTaskList(params)
    },
    queryTaskList(params) {
      const _this = this
      queryBatchTaskList(params, {emulateJSON: true}).then(function (response) {
        if(response.rows != undefined && response.rows != "" && response.rows != null){
           response.rows.forEach((value, index) => {
             const arr = _this.optionsProcedure;
             for (var i in arr) {
               if (value.dqgx == arr[i].value) {
                 value.dqgx = arr[i].label;
               }
             }
           })
         }
        _this.taskList = response.rows;
        _this.totalB = response.total;
        _this.loading = false;
      })
    },
    //分页
    pageCurrentTask(val) {
      this.pageNumB = val
      params.pageNum = val
      params.pageSize = this.pageSizeB;
      params.pcId = this.batchId;
      this.queryTaskList(params)
    },
    pageSizeTask(val) {
      this.pageSizeB = val
      params.pageSize = val;
      params.pageNum = this.pageNumB;
      params.pcId = this.batchId;
      this.queryTaskList(params)
    },
    // 复选框事件
    taskSelectionChange(val) {
      this.taskGridCheck = val;
    },
    // 行点击事件
    taskRowClick(row, column, event) {
      const selectData = this.taskGridCheck;
      this.$refs.taskTable.clearSelection();
      if (selectData.length == 1) {
        selectData.forEach((item) => {
          //判断 如果当前的一行被勾选, 再次点击的时候就会取消选中
          if (item == row) {
            this.$refs.taskTable.toggleRowSelection(row, false);
          }
          //不然就让当前的一行勾选
          else {
            this.$refs.taskTable.toggleRowSelection(row, true);
          }
        });
      } else {
        this.$refs.taskTable.toggleRowSelection(row, true);
      }
    },
    async tasksSelect(selection, row) {
      //执行完清空操作在进行下面的勾选
      await this.$refs.taskTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.taskTable.toggleRowSelection(row, true);
    },
    taskClass({row, rowIndex}) {
      if (this.taskGridCheck.includes(row)) {
        return {
          "background": "#b9deff !important", "color": "blue",
        }
      } else {
        return {
          "——tablebackground": "#F5F7FA",
        }
      }
    },
    //翻页后序号连贯
    taskGetIndex($index) {
      //表格序号
      return (this.pageNumB - 1) * this.pageSizeB + $index + 1;
    },

    //查询任务信息(新增/编辑/删除/导入之后用此方法)
    batchTaskQuery() {
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcId: this.batchId,
      }
      this.queryTaskList(params);
    },

    //任务新增/编辑获取动态表单内容
    getDynamicForm(dynamic){
      headDisplayList({headId: dynamic.dalx, headPoints: 0, headType: 1}).then((res)=>{
        this.formItemList = res.data
        // 根据后台返回的数据生成表单和验证规则
        this.formItemList.forEach(item => {
          this.$set(this.tableTask, item.prop, ''); // 设置表单数据默认值
          let currentRules = [];
          if(item.isRequired){
            currentRules.push({ required: true, message: `${item.label}不能为空`, trigger: 'blur'})
          }
          if(item.max && item.min){
            if(item.pattern){
              let charLength = item.pattern.replace(/[^0-9]/ig,"")
              //console.log(new RegExp(item.pattern.substr(1,item.pattern.length - 2)))
              currentRules.push({ pattern: new RegExp(item.pattern.substr(1,item.pattern.length - 2)), message: `输入内容不符合规则`, trigger: 'blur' });
              //currentRules.push({ pattern: new RegExp(item.pattern.substr(1,item.pattern.length - 2)), message: `${item.label}全宗号长度为${charLength}，由数字组成`, trigger: 'blur' });
            }else {
              currentRules.push({ min: item.min, max: item.max, message: `${item.label}长度在 ${item.min} 到 ${item.max} 个字符`, trigger: 'blur' });
            }
          }
          if(currentRules.length > 0){
            this.$set(this.TaskRules, item.prop, currentRules); // 设置验证规则
          }
        })
      })
    },

    //查询编号动态组成
    queryNumberedList(dynamic){
      queryNumberedComposition({batchNameId:dynamic}).then((res) => {
        this.compositionLists = res.data;
      })
    },
    //编号拼接
    updateBH(){
      let result = '';
      this.compositionLists.forEach(item => {
        if (this.tableTask[item.sourceName]) {
          if (item.metadataMode === 'date') {
            const dateStr = this.tableTask[item.sourceName]
            const year = dateStr.split('-')[0]
            result += year + '-'
          } else {
            result += this.tableTask[item.sourceName] + '-'
          }
        }
      })
      //this.tableTask.bh =  result.slice(0, -1);
      this.$set(this.tableTask, 'bh', result.slice(0, -1));
    },


    //任务新增
    taskAdd() {
      let batchId = this.batchId;
      if (batchId == '' || batchId == null || batchId == undefined) {
        this.$message({message: '请选择批次!', type: 'error'});
        return false;
      }
      if (this.framegridCheck.length == 1) {
        this.tableTask = {};
        this.frameDialogType2 = 'add';
        this.dialogFormVisible2 = true
      } else {
        this.$message({message: '请选择批次!', type: 'error'});
      }
    },
    //任务编辑
    taskUpdate() {
      if (this.taskGridCheck.length <= 0) {
        Message.warning("请选择要修改的数据");
        return false
      }
      if (this.taskGridCheck.length > 1) {
        Message.warning("请选择一条数据进行修改");
        return false
      }
      if (this.taskGridCheck.length == 1) {
        this.tableTask = JSON.parse(JSON.stringify(this.taskGridCheck[0]));
        this.frameDialogType2 = 'edit';
        this.dialogFormVisible2 = true;
      }
    },
    //任务新增/编辑保存
    insertTaskOne(tableTask) {
      const _this = this;
      this.$refs["tableTask"].validate((valid) => {
        if (valid) {
          checkTaskCount({BH:this.tableTask.bh,Id:this.tableTask.id}).then(response => {
            if (response.msg === "true") {
              /*let targetLabel = "";
              for(let i = 0; i < this.formItemList.length; i++) {
                if(this.formItemList[i].prop === "bh") {
                  targetLabel = this.formItemList[i].label;
                  break;
                }
              }*/
              const targetLabel = this.formItemList.find(item => item.prop === "bh").label;
              this.$message({message: targetLabel+"重复，请重新输入!", type: 'error'});
              return false;
            }else {
              this.tableTask.pcId = this.batchId;
              if (this.frameDialogType2 === 'add') {
                insertOneTask(this.tableTask).then(response => {
                  if (response.code == "200") {
                    _this.$message({message: "新增任务成功", type: 'success'});
                    _this.batchTaskQuery();
                    _this.dialogFormVisible2 = false;
                  } else {
                    this.$message({message: "新增任务失败", type: 'error'});
                  }
                });
              }
              if (this.frameDialogType2 === 'edit') {
                const arr = _this.optionsProcedure;
                for (var i in _this.optionsProcedure) {
                  if (this.tableTask.dqgx == arr[i].label) {
                    this.tableTask.dqgx = arr[i].value;
                  }
                }
                updateOneTask(this.tableTask).then(response => {
                  if (response.code == "200") {
                    _this.$message({message: "修改任务成功", type: 'success'});
                    _this.batchTaskQuery();
                    _this.dialogFormVisible2 = false;
                  } else {
                    this.$message({message: "修改任务失败", type: 'error'});
                  }
                });
              }
            }
          })
        } else {
          return false;
        }
      })
    },
    //任务删除
    taskDelete() {
      if (this.taskGridCheck.length <= 0) {
        Message.warning("请选择要删除的数据");
        return false
      }
      if (this.taskGridCheck.length > 1) {
        Message.warning("请选择一条数据进行删除");
        return false
      }
      if (this.taskGridCheck.length == 1) {
        this.$confirm('此操作将删除选中数据,是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          const _this = this;
          let id = this.taskGridCheck[0].id;
          deleteOneTask(id).then((response) => {
            if (response.code == 200) {
              this.$message({message: "删除任务成功", type: 'success'})
              _this.batchTaskQuery();
            } else {
              this.$message({message: "删除任务失败", type: 'error'});
            }
          })
        }).catch(() => {});
      }
    },

  }
}
</script>

<style scoped lang="scss">
.el-form-item--small.el-form-item {
  margin-bottom: 5px;
}

.dashboard-editor-container {
  padding: 5px;
  width: 100%;
  height: 100%;
  background-color: rgb(240, 242, 245);
  position: relative;

  .github-corner {
    position: absolute;
    top: 0;
    border: 0;
    right: 0;
  }

  .chart-wrapper {
    background: #ffffff;
    padding: 10px 10px 0;
    margin-bottom: 10px;
    height: calc(100vh - 95px);
    border-radius: 8px;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1)
  }
}

::v-deep .el-table {
  border-right: 1px solid #dfe6ec;
  color: #515a6e;

  & > .el-table__header-wrapper {
    & > table {
      tr:first-of-type {
        th {
          background: rgba(204, 204, 204, 0.18);
          color: #515a6e;
          font-size: 12px;
          //text-align: center;
          height: 34px !important;
          padding: 5px 0 !important;
        }
      }

      tr:nth-of-type(2) {
        th {
          background: #fff;
          //background: rgba(204, 204, 204, 0.05);
          color: #515a6e;
          font-size: 12px;
          text-align: center;
          padding: 0 !important;
          height: 34px;

          .el-input__inner {
            border: none;
            padding: 0;
            height: 20px;
          }
        }
      }

      & > colgroup {
        col {
          &:last-of-type {
            width: 17px !important;
          }
        }
      }
    }
  }

  .el-table__body-wrapper {
    overflow: auto !important;
    //border-right: 1px solid #dfe6ec;
    //width: calc(100% - 1px);
    .el-table__row {
      td {
        text-align: center;
        font-size: 12px;
        padding: 5px 0 !important;

        &:last-child {
          .cell {
            display: flex;
            //margin: 0 5px;
            //flex-direction: column;
            justify-content: space-around;
            width: 100%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            //padding: 0;
            .el-button {
              width: 100%;
              height: 100%;
              position: relative;
              top: 0;
              right: 0;
              //padding: 0;
              margin: 0 2px;
              //span{
              //  display: inline-block;
              //  height: 100%;
              //}
            }
          }
        }
      }
    }
  }

  //滚动条
  /**滚动条的宽度*/
  ::-webkit-scrollbar {
    width: 10px !important; /*竖向*/
    height: 10px !important; /*横向*/
  }

  /*滚动条的滑块*/
  ::-webkit-scrollbar-thumb {
    background-color: #ddd !important;
    border-radius: 8px !important;
  }
}
::v-deep .taskColumnsFalse{
  width: 100%;
  height:calc(100vh - 230px);
  border: 1px solid #ddd;
  display: flex;
  justify-content: center;
  align-items: center;
  color:#dfe6ec;
}
.page {
  float: right;
  height: 38px;
  text-align: right;

  ::v-deep .el-pagination {
    height: 28px;
    //position: relative;
    //margin-top: 5px;
    font-size: 12px;

    & > .el-pagination__total {
      font-size: 12px;
    }

    & > .el-pagination__sizes {
      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }

    button {
      background-color: transparent;
    }

    & > .el-pager {
      li {
        font-size: 12px;
        background-color: transparent;
      }
    }

    & > .el-pagination__jump {
      font-size: 12px;

      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }
  }
}

.rt-input ::v-deep .el-input__inner {
  color: #000000;
}

//弹框样式
.dialog-style {
  ::v-deep .el-dialog__body {
    padding: 10px;
  }

  ::v-deep .el-dialog__header {
    background: rgba(204, 204, 204, 0.18);
    padding: 10px;
  }

  ::v-deep .el-dialog__title {
    font-weight: 500;
    font-size: 15px
  }

  ::v-deep .el-dialog__headerbtn {
    top: 13px;
  }

  ::v-deep .el-dialog__footer {
    background: rgba(204, 204, 204, 0.18);
    padding-right: 15px;
    padding: 8px;
  }

  ::v-deep .el-button + .el-button {
    margin-left: 6px;
  }
}

// 基本信息弹框
.dialog-basic {
  margin-left: 10px;

  .form-basic {
    margin-bottom: 15px;
    line-height: 30px;
    border-bottom: 1px solid #ccc;
    margin-left: 15px;
    margin-right: 15px;
  }
}

//弹窗样式修改
::v-deep .el-dialog {
  display: flex;
  flex-direction: column;
  margin: 0 !important;
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  max-height: calc(100% - 30px);
  max-width: calc(100% - 30px);
}

::v-deep .el-table tbody tr:hover > td {
  background: var(--tablebackground) !important;
}

//表格鼠标悬浮时的样式 （高亮）
::v-deep {
  .el-table--enable-row-hover {
    .el-table__body tr {
      &:hover {
        background: rgb(223 239 253);
        border: 1px solid #313463;
      }
    }
  }
}
</style>

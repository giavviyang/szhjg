<template>
  <div class="dashboard-editor-container">
    <el-row :gutter="6" >
      <!--左侧表单-->
      <el-col :span="12" style="height: calc(100vh - 90px)">
        <div class="chart-wrapper">
          <el-form :model="queryForm" ref="queryForm" size="small" :inline="true" v-hasPermi="['szhjg:sjjg:tjrw:search']">
            <el-form-item label="选择批次" prop="pcId" >
              <el-cascader v-model="queryForm.pcId" :options="projectOptions" :props="projectProps" clearable size="mini"
                           filterable :show-all-levels="false" @change="handleChange"
                           style="width: 160px;height: 28px;line-height: 28px;"></el-cascader>
            </el-form-item>
            <el-form-item label="编号" prop="bianHao">
              <el-input v-model="queryForm.bianHao" placeholder="请输入查询内容" clearable style="width: 160px" size="mini"
                        @keyup.enter.native="specifyTaskNameSearch"/>
            </el-form-item>
            <el-form-item>
              <el-button type="primary" icon="el-icon-search" size="mini" @click="specifyTaskNameSearch">搜索</el-button>
            </el-form-item>
          </el-form>
          <el-row :gutter="10" class="mb8">
            <el-col :span="1.5">
              <el-button type="primary" plain icon="el-icon-plus" size="mini" v-hasPermi="['szhjg:sjjg:tjrw:addTask']"
                         @click="taskAdd">新增任务</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="success" plain icon="el-icon-edit" size="mini" v-hasPermi="['szhjg:sjjg:tjrw:updataTask']"
                         @click="taskUpdate">修改</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="danger" plain icon="el-icon-delete" size="mini" v-hasPermi="['szhjg:sjjg:tjrw:deleteTask']"
                         @click="taskDelete">删除</el-button>
            </el-col>
          </el-row>
          <!--表格信息-->
          <el-table border v-if="taskColumns.length<=0" height="calc(100vh - 230px)"></el-table>
          <el-table v-else row-key="id" :data="taskList" border width="100%" height="calc(100vh - 220px)" ref="taskTable"
                    slot="table" @selection-change="taskHandleSelectionChange" @row-click="taskHandleRowClick"
                    @select="taskSelect" :row-style="taskClass">
            <el-table-column type="selection" width="40"></el-table-column>
            <el-table-column align="center" :index="taskGetIndex" type="index" label="序号" width="55"></el-table-column>
            <el-table-column align="center" v-for="(item,index) in taskColumns" :key="index" :label="item.label"
                             :prop="item.prop" :min-width="item.width" :formatter="item.formatter" show-overflow-tooltip>
            </el-table-column>
          </el-table>
          <div class="page" style="margin-top: 5px;">
            <el-pagination :page-sizes="[20, 30, 50, 100]" :page-size="pageSizeTask" :current-page="pageNumTask"
                           layout="total, sizes, prev, pager, next, jumper" :total="totalTask" @size-change="pageSizeTaskS"
                           @current-change="pageCurrentTask" :pager-count="5"/>
          </div>
        </div>
      </el-col>
      <!--右侧表单-->
      <el-col :span="12" style="height: calc(100vh - 90px)">
        <div class="chart-wrapper">
          <el-form :model="queryForm" ref="queryForm" size="small" :inline="true" style="margin-top: 0; margin-bottom: 0;">
            <el-form-item label="编号" prop="bh">
              <el-input v-model="queryForm.bh" :disabled="true" clearable class="rt-input" size="mini" style="width: 200px"/>
            </el-form-item>
            <el-form-item>
              <el-button type="primary" icon="el-icon-reading" size="mini" @click="subdivisionSearch"
                         v-hasPermi="['szhjg:sjjg:tjrw:subdivision']">分件</el-button>
              <el-button type="success" plain icon="el-icon-s-promotion" size="mini" @click="submitTask"
                         v-hasPermi="['szhjg:sjjg:tjrw:taskSub']">任务提交</el-button>
              <el-button type="info" plain icon="el-icon-edit-outline" size="mini" @click="viewRecord"
                         v-hasPermi="['szhjg:sjjg:fjrw:taskRecord']">查看记录</el-button>
            </el-form-item>
          </el-form>
          <el-row :gutter="10" class="mb8">
            <el-col :span="1.5">
              <el-button type="primary" plain icon="el-icon-plus" size="mini" @click="methodOne"
                         v-hasPermi="['szhjg:sjjg:tjrw:addPage']">加页</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="primary" plain icon="el-icon-plus" size="mini" @click="methodTwo"
                         v-hasPermi="['szhjg:sjjg:tjrw:minusPage']">减页</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="success" plain icon="el-icon-edit" size="mini" @click="methodThree"
                         v-hasPermi="['szhjg:sjjg:tjrw:split']">拆件</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="success" plain icon="el-icon-edit" size="mini" @click="methodFour"
                         v-hasPermi="['szhjg:sjjg:tjrw:assembly']">合件</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="danger" plain icon="el-icon-delete" size="mini" @click="methodFive"
                         v-hasPermi="['szhjg:sjjg:tjrw:clear']">清空文件</el-button>
            </el-col>
            <el-col :span="1.5">
              <el-button type="info" plain icon="el-icon-sort" size="mini" @click="toggleExpandAll"
                         v-hasPermi="['szhjg:sjjg:tjrw:toggle']">展开/折叠</el-button>
            </el-col>
          </el-row>

          <el-table row-key="id" :data="subdivisionList" border width="100%" height="calc(100vh - 220px)" slot="table"
                    ref="subdivisionTable" @selection-change="subHandleSelectionChange" @row-click="subHandleRowClick"
                    @select="subSelect" :row-style="subClass" v-if="refreshTable" :default-expand-all="isExpandAll"
                    :tree-props="{children: 'children', hasChildren: 'hasChildren'}">
            <el-table-column type="selection" width="40"></el-table-column>
            <el-table-column align="center" :index="subdivisionGetIndex" type="index" label="序号" width="55"/>
            <el-table-column align="center" v-for="(item,index) in subdivisionColumns" :key="index" :label="item.label"
                             :prop="item.prop" :min-width="item.width" show-overflow-tooltip :formatter="item.formatter">
            </el-table-column>
          </el-table>
          <div class="page" style="margin-top: 5px;">
            <el-pagination :page-sizes="[20, 30, 50, 100]" :page-size="pageSizeSub" :current-page="pageNumSub"
                           layout="total, sizes, prev, pager, next, jumper" :total="totalSub" @size-change="pageSizeSubS"
                           @current-change="pageCurrentSub" :pager-count="5"/>
          </div>
        </div>
      </el-col>

      <!--任务新增/编辑-->
      <el-dialog :title="frameDialogType=='add'?'新增任务':frameDialogType=='edit'?'编辑任务':''" width="650px"
                 :visible.sync="dialogFormVisibleTask1" :close-on-click-modal="false" :close-on-press-escape="false"
                 :destroy-on-close="true" :append-to-body="true" class="dialog-style dialog-basic">
        <el-form ref="tableTask" :model="tableTask" :inline="true" :rules="TaskRules" label-width="90px">
          <br>
          <el-form-item v-for="(item, index) in formItemList" :label="item.label" :key="index" :prop="item.prop">
            <el-input v-if="item.type == 'input'" v-model="tableTask[item.prop]" :placeholder="item.placeholder"
                      :rules="item.rules" size="mini" style="width:200px" :disabled="item.disabled" class="rt-input"
                      @blur="updateBH"></el-input>
            <el-select v-if="item.type == 'select'" v-model="tableTask[item.prop]" placeholder="请选择" size="mini"
                       style="width:200px" @blur="updateBH">
              <el-option v-for="items in item.options" :key="items.value" :label="items.label" :value="items.value"
                :rules="items.rules">
              </el-option>
            </el-select>
            <el-date-picker v-if="item.type == 'date'" v-model="tableTask[item.prop]" clearable size="mini"
                            :placeholder="item.placeholder" type="date" value-format="yyyy-MM-dd HH:mm:ss"
                            :picker-options="pickerOptions" :rules="item.rules" style="width:200px" @blur="updateBH"/>
            <!-- 其他表单项类型 -->
          </el-form-item>
        </el-form>

        <div slot="footer" class="dialog-footer">
          <el-button size="mini" plain @click="dialogFormVisibleTask1=false">取 消</el-button>
          <el-button size="mini" plain type="primary" @click="insertTaskOne('tableTask')">保 存</el-button>
        </div>
      </el-dialog>


      <!--分件-->
      <el-dialog title="分件" :visible.sync="dialogFormVisibleSub" width="500px" :modal='false' :close-on-click-modal="false"
                 :close-on-press-escape="false" :destroy-on-close="true" :append-to-body="true" :before-close="subdivisionCancel"
                 class="dialog-style dialog-basic fenjian" >
        <el-form ref="pointsForm" :model="pointsForm" :inline="true" :rules="pointsRules" label-width="150px">
          <el-row>
            <el-form-item label="编号" prop="bh" >
              <el-input v-model="pointsForm.bh" disabled clearable size="mini" style="width:200px" class="rt-input"/>
            </el-form-item>
          </el-row>
          <el-row>
            <el-form-item label="选择分件方式" prop="fjfs">
              <el-select v-model="pointsForm.fjfs" placeholder="请选择分件方式" clearable size="mini" style="width:200px">
                <el-option label="终止页号" value="终止页号"></el-option>
                <el-option label="页数" value="页数"></el-option>
              </el-select>
            </el-form-item>
          </el-row>
          <el-row>
            <el-form-item label="请输入" prop="countPage">
              <el-input v-model="pointsForm.countPage" placeholder="" clearable size="mini" style="width:200px"/>
            </el-form-item>
            <el-button type="primary" plain size="mini" @click="insertSubdivision('pointsForm')">保 存</el-button>
          </el-row>
        </el-form>
        <div slot="footer" class="dialog-footer">
          <el-button size="mini" plain @click="subdivisionCancel">取 消</el-button>
        </div>
      </el-dialog>

      <!--查看记录-->
      <ViewingRecord  ref="ViewingRecord"></ViewingRecord>

    </el-row>
  </div>
</template>

<script>
import {Message} from "element-ui";
import ViewingRecord from '@/views/szhjg/sjjg/ViewingRecord/index';
import { getUserProfile } from "@/api/system/user";
import { queryProjectBatch, queryDisplayGx, bindingRecipient } from "@/api/szhjg/szhjgCommon";
import { taskDynamicListHead } from '@/api/szhjg/dynamicCommon';
import { queryTaskIdList } from '@/api/szhjg/sjjg/tjrw';
import { insertOneTask, updateOneTask, deleteOneTask } from "@/api/szhjg/rwgl/rwgl";
import { queryNumberedComposition, checkTaskCount } from "@/api/szhjg/rwgl/rwgl";
import { searchSubdivisionList } from "@/api/szhjg/sjjg/fj";
import { finallyNumber, queryMaxYm, insertSubdivisionAdd } from "@/api/szhjg/sjjg/fj";
import { additionPage, subtractedPage, assemblyPCS, disassemblePCS, emptyPCS } from "@/api/szhjg/sjjg/fj";
import { queryNextGxName, processingSubmitPass }  from '@/api/szhjg/sjjg/approachCommon';


const params = {
  pageNum: 1,
  pageSize: 20
}
export default {
  name: "index",
  components: { ViewingRecord },
  data() {
    return {
      isOver: false,
      //存放当前登入用户名称
      acquireNickName: '',
      //遮罩层
      loading: true,
      //是否展开，默认全部折叠
      isExpandAll: false,
      //重新渲染表格状态
      refreshTable: true,
      //批次项目信息
      projectOptions: [],
      projectProps: {label: 'projectName', value: 'benId', children: 'pcName'},
      queryForm:{
        pcId: [],
        bianHao: "",
        bh: '',
      },
      //存放批次id
      batchId: '',
      //存放案卷id
      recordsId: '',
      //存放页面展示工序
      optionsProcedure: [],
      //存放动态输入框字段
      formItemList: [],
      //时间限制
      pickerOptions: {
        disabledDate(time) {
          return time.getTime() > Date.now();
        },
      },

      /*------------------------------        任务(案卷)的参数     ----------------------------------------------------*/
      totalTask: 0,
      pageNumTask: 1,
      pageSizeTask: 20,
      //任务复选框选中
      taskGridCheck: [],
      //任务列表
      taskList: [],
      //任务表头
      taskColumns: [],

      dialogFormVisibleTask1: false, //任务弹窗
      //默认新增状态
      frameDialogType: 'add',  //批次新增
      // 新增/编辑任务表单
      tableTask: {},
      TaskRules: {},

      //获取编号组成功能
      compositionLists:[],


      /*------------------------------        分件(案件)的参数     ----------------------------------------------------*/
      dialogFormVisibleSub: false, //分件弹窗
      totalSub: 0,
      pageNumSub: 1,
      pageSizeSub: 20,
      //分件复选框选中
      subGridCheck: [],
      //分件列表
      subdivisionList: [],
      //分件表头
      subdivisionColumns: [
        {label: '件号', prop: 'jh', width: '80'},
        {label: '开始页数', prop: 'ksys', width: '80'},
        {label: '终止页数', prop: 'zzys', width: '80'},
        {label: '页码', prop: 'ym', width: '80'},
        {label: '页数', prop: 'ys', width: '80'},
        {label: '是否首页', prop: 'sfsy', width: '80', formatter: function (row, column, cellValue) {
            return cellValue === '是' ? '是' : '';
          }
        },
      ],
      pointsForm: {
        fjId: '', bh: '', fjfs: '', countPage:'', jh: '', onPiece: '', maxYm: '',
      },
      pointsRules: {
        fjfs: [
          {required: true, message: '选择分件方式', trigger: 'blur'},
        ],
        countPage: [
          {required: true, message: '内容不能为空', trigger: 'blur'},
          {pattern:/^[\d]+$/,  message: '内容不符合规则，由数字组成' },
        ],
      },


    }
  },

  mounted() {},

  created() {
    this.getOptionsData();
    this.queryGxOptions();
    this.getNickName();
  },

  watch:{
    projectOptions(val){
      this.queryForm.pcId = val[0].benId
      if(val[0].pcName.length > 0){
        this.queryForm.pcId = [val[0].benId,val[0].pcName[0].benId]
      }
      this.getTableHeaders(this.queryForm.pcId[1]);
      this.getDynamicForm(this.queryForm.pcId[1]);
      params.pcId = this.queryForm.pcId[1];
      this.queryTaskNameList(params);
      this.batchId = this.queryForm.pcId[1];
      this.queryNumberedList(this.queryForm.pcId[1]);
    }
  },

  updated() {
    if (this.dialogFormVisibleSub) {
      this.keyDown();
    }else{
      document.onkeydown = null
    }
  },

  methods: {
    //分件弹窗监听键盘回车保存事件
    keyDown() {
      let that = this
      //监听键盘按钮
      document.onkeydown = function (e) {
        if (e.keyCode === 13) {
          that.insertSubdivision('pointsForm');
        }
      }
    },
    //查询当前登入用户
    getNickName() {
      getUserProfile().then(response => {
        this.acquireNickName = response.data.nickName
      });
    },
    //默认查询项目批次
    getOptionsData() {
      queryProjectBatch({gxId:1}).then((res) => {
        this.projectOptions = res.data;
        this.taskOptions = res.data;
      })
    },
    //查询页面动态展示工序
    queryGxOptions() {
      queryDisplayGx().then(res => {
        this.optionsProcedure = res.map((item) => {
          return item;
        });
      });
    },

    //切换项目批次之后进行查询
    handleChange(value) {
      this.taskColumns = [];
      this.taskList = [];
      this.getTableHeaders(value[1]);
      this.getDynamicForm(value[1])
      params.pcId = value[1];
      this.queryTaskNameList(params);
      this.batchId = value[1];
      this.queryNumberedList(value[1]);
    },
    //查询动态表头展示字段
    getTableHeaders(dynamic) {
      taskDynamicListHead({headBatch: dynamic, headPoints: 0, headType: 0}).then((res) => {
        this.taskColumns = res.data
      })
    },
    //查询获取动态录入表单内容
    getDynamicForm(dynamic){
      this.formItemList = [];
      this.TaskRules = {};
      taskDynamicListHead({headBatch: dynamic, headPoints: 0, headType: 1}).then((res)=>{
        this.formItemList = res.data
        // 根据后台返回的数据生成表单和验证规则
        this.formItemList.forEach(item => {
          this.$set(this.tableTask, item.prop, ''); // 设置表单数据默认值
          let currentRules = [];
          if(item.isRequired){
            currentRules.push({ required: true, message: `${item.label}不能为空`, trigger: 'blur'})
          }
          if(item.max && item.min){
            if(item.pattern){
              let charLength = item.pattern.replace(/[^0-9]/ig,"")
              console.log(new RegExp(item.pattern.substr(1,item.pattern.length - 2)))
              currentRules.push({ pattern: new RegExp(item.pattern.substr(1,item.pattern.length - 2)), message: `输入内容不符合规则`, trigger: 'blur' });
              //currentRules.push({ pattern: new RegExp(item.pattern.substr(1,item.pattern.length - 2)), message: `${item.label}全宗号长度为${charLength}，由数字组成`, trigger: 'blur' });
            }else {
              currentRules.push({ min: item.min, max: item.max, message: `${item.label}长度在 ${item.min} 到 ${item.max} 个字符`, trigger: 'blur' });
            }
          }
          if(currentRules.length > 0){
            this.$set(this.TaskRules, item.prop, currentRules); // 设置验证规则
          }
        })
      })
    },

    //查询编号动态组成
    queryNumberedList(dynamic){
      queryNumberedComposition({batchNameId:dynamic}).then((res) => {
        this.compositionLists = res.data;
      })
    },
    //编号拼接
    updateBH(){
      let result = '';
      this.compositionLists.forEach(item => {
        if (this.tableTask[item.sourceName]) {
          if (item.metadataMode === 'date') {
            const dateStr = this.tableTask[item.sourceName]
            const year = dateStr.split('-')[0]
            result += year + '-'
          } else {
            result += this.tableTask[item.sourceName] + '-'
          }
        }
      })
      this.$set(this.tableTask, 'bh', result.slice(0, -1));
    },


    /*----------------------------------        案卷的参数     --------------------------------------------------------*/
    //搜索
    specifyTaskNameSearch(){
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcId: this.queryForm.pcId[1],
        bh:this.queryForm.bianHao,
      }
      this.queryTaskNameList(params);
    },
    queryTaskNameList(params){
      const _this = this
      queryTaskIdList(params, {emulateJSON: true}).then(function (response) {
        if(response.rows != undefined && response.rows != "" && response.rows != null){
          response.rows.forEach((value, index) => {
            const arr = _this.optionsProcedure;
            for (var i in arr) {
              if (value.dqgx == arr[i].value) {
                value.dqgx = arr[i].label;
              }
            }
          })
        }
        _this.taskList = response.rows;
        _this.totalTask = response.total;
        _this.loading = false;
      })
    },
    //分页
    pageCurrentTask(val) {
      this.pageNumTask = val
      params.pageNum = val
      params.pageSize = this.pageSizeTask;
      params.pcId = this.queryForm.pcId[1];
      params.bh = this.queryForm.bianHao;
      this.queryTaskNameList(params)
    },
    pageSizeTaskS(val) {
      this.pageSizeTask = val
      params.pageSize = val;
      params.pageNum = this.pageNumTask;
      params.pcId = this.queryForm.pcId[1];
      params.bh = this.queryForm.bianHao;
      this.queryTaskNameList(params)
    },
    // 复选框事件
    taskHandleSelectionChange(val) {
      this.taskGridCheck = val;
      if (this.taskGridCheck.length == 1){
        this.queryForm.bh = this.taskGridCheck[0].bh;
        this.recordsId = this.taskGridCheck[0].id;
        this.searchSubList(this.taskGridCheck[0].id);
      }
    },
    //行点击事件
    taskHandleRowClick(row, column, event) {
      this.$refs.taskTable.clearSelection();
      if (this.taskGridCheck.length === 0) {
        this.$refs.taskTable.toggleRowSelection(row)
        return;
      }
      this.$refs.taskTable.toggleRowSelection(row)
    },
    async taskSelect(selection, row) {
      //执行完清空操作在进行下面的勾选
      await this.$refs.taskTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.taskTable.toggleRowSelection(row, true);
    },
    taskClass( { row,rowIndex }) {
      if (this.taskGridCheck.includes(row)){
        return {
          "background":"#b9deff !important", "color": "blue",
        }
      } else {
        return {
          "——tablebackground" : "#F5F7FA",
        }
      }
    },
    //翻页后序号连贯
    taskGetIndex($index) {
      //表格序号
      return (this.pageNumTask - 1) * this.pageSizeTask + $index + 1;
    },

    //任务新增
    taskAdd() {
      if (this.batchId == '' || this.batchId == null || this.batchId == undefined) {
        this.$message({message: '请选择批次!', type: 'error'});
        return false;
      }
      this.tableTask = {};
      this.frameDialogType = 'add';
      this.dialogFormVisibleTask1 = true;
    },
    //任务编辑
    taskUpdate() {
      if (this.taskGridCheck.length <= 0) {
        Message.warning("请选择要修改的数据");
        return false
      }
      if (this.taskGridCheck.length > 1) {
        Message.warning("请选择一条数据进行修改");
        return false
      }
      if (this.taskGridCheck.length == 1) {
        this.tableTask = JSON.parse(JSON.stringify(this.taskGridCheck[0]));
        this.frameDialogType = 'edit';
        this.dialogFormVisibleTask1 = true;
      }
    },
    //任务新增/编辑保存
    insertTaskOne(tableTask){
      const _this = this;
      this.$refs["tableTask"].validate((valid) => {
        if (valid) {
          checkTaskCount({BH:this.tableTask.bh,Id:this.tableTask.id}).then(response => {
            if (response.msg === "true") {
              const targetLabel = this.formItemList.find(item => item.prop === "bh").label;
              this.$message({message: targetLabel+"重复，请重新输入!", type: 'error'});
              return false;
            }else {
              if(this.frameDialogType==='add'){
                this.tableTask.pcId = this.batchId;
                insertOneTask(this.tableTask).then(response => {
                  if (response.code == "200") {
                    _this.$message({message: "新增任务成功", type: 'success'});
                    _this.batchTaskQuery();
                    _this.dialogFormVisibleTask1 = false;
                  }else {
                    this.$message({message: "新增任务失败", type: 'error'});
                  }
                });
              }
              if(this.frameDialogType==='edit'){
                const arr = _this.optionsProcedure;
                for (var i in _this.optionsProcedure) {
                  if (this.tableTask.dqgx == arr[i].label) {
                    this.tableTask.dqgx = arr[i].value;
                  }
                }
                updateOneTask(this.tableTask).then(response => {
                  if (response.code == "200") {
                    _this.$message({message: "编辑任务成功", type: 'success'});
                    _this.batchTaskQuery();
                    _this.dialogFormVisibleTask1 = false;
                  }else {
                    this.$message({message: "编辑任务失败", type: 'error'});
                  }
                });
              }
            }
          })
        } else {
          return false;
        }
      })
    },

    //任务删除
    taskDelete() {
      if (this.taskGridCheck.length <= 0) {
        Message.warning("请选择要删除的数据");
        return false
      }
      if (this.taskGridCheck.length > 1) {
        Message.warning("请选择一条数据进行删除");
        return false
      }
      if (this.taskGridCheck.length == 1) {
        this.$confirm('此操作将删除选中数据,是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          const _this = this;
          let id = this.taskGridCheck[0].id;
          deleteOneTask(id).then((response) => {
            if (response.code == 200) {
              this.$message({message:"删除任务成功", type: 'success'})
              _this.batchTaskQuery();
            } else {
              this.$message({message: "删除任务失败", type: 'error'});
            }
          })
        }).catch(() => {});
      }
    },

    //查询任务信息(新增/编辑/删除/导入之后用此方法)
    batchTaskQuery(){
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcId: this.batchId,
        bh: this.queryForm.bianHao,
      }
      this.queryTaskNameList(params);
    },



    /*----------------------------------        案件的参数     --------------------------------------------------------*/
    //复选框事件
    subHandleSelectionChange(val) {
      this.subGridCheck = val;
    },
    // 行点击事件
    subHandleRowClick(row, column, event) {
      this.$refs.subdivisionTable.toggleRowSelection(row, column)

      this.$refs.subdivisionTable.clearSelection();
      if (this.subGridCheck.length === 0) {
        this.$refs.subdivisionTable.toggleRowSelection(row)
        return;
      }
      this.$refs.subdivisionTable.toggleRowSelection(row)
    },
    async subSelect(selection, row) {
      //执行完清空操作在进行下面的勾选
      await this.$refs.subdivisionTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.subdivisionTable.toggleRowSelection(row, true);
    },
    subClass( { row,rowIndex }) {
      if (this.subGridCheck.includes(row)){
        return {
          "background":"#b9deff !important", "color": "blue",
        }
      } else if (row['sfsy'] === '是') {
        return {
          //"background": "#d5aaff !important",
          "background": "#fbe3ff !important",
        }
      }
    },
    subdivisionGetIndex($index) {
      //表格序号
      return (this.pageNumSub - 1) * this.pageSizeSub + $index + 1;
    },
    /** 展开/折叠操作 */
    toggleExpandAll() {
      this.refreshTable = false;
      this.isExpandAll = !this.isExpandAll;
      this.$nextTick(() => {
        this.refreshTable = true;
      });
    },
    //分页
    pageCurrentSub(val) {
      this.pageNumSub = val
      params.pageNum = val
      params.pageSize = this.pageSizeSub;
      params.ajId = this.taskGridCheck[0].id;
      this.searchSubNameList(params)
    },
    pageSizeSubS(val) {
      this.pageSizeSub = val
      params.pageSize = val;
      params.pageNum = this.pageNumSub;
      params.ajId = this.taskGridCheck[0].id;
      this.searchSubNameList(params)
    },
    //查询分件列表
    searchSubList(val){
      const _this = this
      let params = {
        pageNum: 1,
        pageSize: 20,
        ajId: val
      }
      this.searchSubNameList(params);
    },
    searchSubNameList(params){
      const _this = this
      searchSubdivisionList(params).then(response => {
        _this.subdivisionList = response.rows;
        _this.totalSub = response.total
        _this.loading = false
      })
    },

    //分件按钮
    subdivisionSearch(){
      if (this.taskGridCheck.length == 1){
        let a = this.taskGridCheck[0].lqr;
        let b = this.acquireNickName;
        let c = this.taskGridCheck[0].id;
        if (a == b || a==null|| a=='' || a==undefined){
          if (a != b){
            this.bindingRecipientName(c)
          }
          finallyNumber({fjId:c}).then(response =>{this.$set(this.pointsForm,"onPiece",response.msg)});
          queryMaxYm({fjId:c}).then(response =>{this.$set(this.pointsForm,"maxYm",response.data)});
          this.dialogFormVisibleSub = true;
          this.pointsForm.bh = this.queryForm.bh;
          this.pointsForm.fjId = c;
        }else {
          Message.warning("当前任务已被用户‘"+a+"’领取!");
        }
      }else {
        Message.warning("请选择一条任务!");
      }
    },
    //绑定操作人
    bindingRecipientName(val){
      let nameId = val
      bindingRecipient({nameId:nameId}).then((res) => {
        if (res.code == "200"){
          //不显示提示信息
        }else{
          this.$message({message: "用户绑定失败", type: 'error'});
        }
      });
    },
    //分件取消按钮
    subdivisionCancel(){
      this.dialogFormVisibleSub = false;
      this.pointsForm.fjfs = '';
      this.pointsForm.countPage = '';
    },
    //分件保存
    insertSubdivision(pointsForm){
      const _this = this;
      this.$refs["pointsForm"].validate((valid) => {
        if (valid) {
          if (this.pointsForm.fjfs =="终止页号"){
            let max = this.pointsForm.maxYm;
            if ( max>this.pointsForm.countPage || max== this.pointsForm.countPage ){
              this.$message({message: "终止页号已存在", type: 'error'});
              return;
            }
          }
          if (this.pointsForm.onPiece == "000"){
            this.pointsForm.jh = "001";
            this.pointsForm.onPiece = "001";
          }else {
            let x = this.pointsForm.onPiece;
            let g = Number(x) + 1;
            if (g.toString().length <= 1) {
              this.pointsForm.jh = "00"+ g;
            }else if (g.toString().length == 2){
              this.pointsForm.jh = "0"+ g;
            }else {
              this.pointsForm.jh = g+"";
            }
            this.pointsForm.onPiece = this.pointsForm.jh;
          }

          insertSubdivisionAdd(this.pointsForm).then(response => {
            if (response.code == "200") {
              if (this.pointsForm.fjfs =="终止页号"){
                _this.pointsForm.maxYm = this.pointsForm.countPage;
              }
              _this.searchSubList(this.pointsForm.fjId);
            }else {
              this.$message({message: "分件失败", type: 'error'});
            }
          })
        }else {
          return false;
        }
      })
    },

    //加页
    methodOne(){
      if (this.subGridCheck.length == 1){
        let o =  this.subGridCheck[0].sfsy;
        if (o=="是"){
          let a = this.subGridCheck[0].jh;
          let b = this.subGridCheck[0].ajId;
          additionPage({partJH:a,aId:b}).then((res) => {
            if (res.code == "200") {
              this.searchSubList(b);
            }else {
              this.$message({message: "加页失败", type: 'error'});
            }
          })
        }else {
          this.$message({message: '请选中首页进行页面数量更改!', type: 'warning'});
        }
      }else {
        this.$message({message: '请选择要加页的数据', type: 'warning'});
      }
    },
    //减页
    methodTwo(){
      if (this.subGridCheck.length == 1){
        let o1 =  this.subGridCheck[0].ys;
        if (o1!=1){
          let o2 =  this.subGridCheck[0].sfsy;
          if (o2=="是"){
            let a = this.subGridCheck[0].jh;
            let b = this.subGridCheck[0].ajId;
            subtractedPage({partJH:a,aId:b}).then((res) => {
              if (res.code == "200") {
                this.searchSubList(b);
              }else {
                this.$message({message: "减页失败", type: 'error'});
              }
            })
          }else {
            this.$message({message: '请选中首页进行页面数量更改!', type: 'warning'});
          }
        }else {
          this.$message({message: '该文件页数为1，不能减少!!', type: 'warning'});
        }
      }else {
        this.$message({message: '请选择要减页的数据', type: 'warning'});
      }
    },
    //拆件
    methodThree(){
      if (this.subGridCheck.length == 1){
        this.$confirm('您确定要拆分选中的文件吗?！', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          let o =  this.subGridCheck[0].sfsy;
          if (o!="是"){
            let a = this.subGridCheck[0].id;
            let b = this.subGridCheck[0].jh;
            let c = this.subGridCheck[0].ajId;
            disassemblePCS({wId:a,partJH:b,aId:c}).then((res) => {
              if (res.code == "200") {
                this.searchSubList(c);
              }else {
                this.$message({message: "拆件失败", type: 'error'});
              }
            })
          }else {
            this.$message({message: '文件首页无法拆分!', type: 'warning'});
          }
        }).catch(() => {});
      }else {
        this.$message({message: '请选择要拆件的数据', type: 'warning'});
      }
    },
    //合件
    methodFour(){
      if (this.subGridCheck.length == 1){
        let o =  this.subGridCheck[0].sfsy;
        if (o=="是"){
          let a =  this.subGridCheck[0].jh;
          if (a!="001"){
            this.$confirm('您确定要合并该文件吗?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning',
            }).then(() => {
              let b = this.subGridCheck[0].ajId;
              assemblyPCS({partJH:a,aId:b}).then((res) => {
                if (res.code == "200") {
                  this.searchSubList(b);
                }else {
                  this.$message({message: "减页失败", type: 'error'});
                }
              })
            }).catch(() => {});
          }else {
            this.$message({message: '无法合并首个文件!', type: 'warning'});
          }
        }else {
          this.$message({message: '请选中文件首页进行合并!', type: 'warning'});
        }
      }else {
        this.$message({message: '请选择要合件的数据', type: 'warning'});
      }
    },
    //清空文件
    methodFive(){
      if (this.taskGridCheck.length == 1 || this.recordsId.length>20){
        this.$confirm('要清空所有编目吗?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning',
        }).then(() => {
          let a;
          if (this.taskGridCheck.length == 1){
            a = this.taskGridCheck[0].id;
          }else {
            a = this.recordsId;
          }
          emptyPCS({aId:a}).then((res) => {
            if (res.code == "200") {
              this.searchSubList(a);
            }else {
              this.$message({message: "清空文件失败", type: 'error'});
            }
          })
        }).catch(() => {});
      }else {
        this.$message({message: '请选择一条任务', type: 'warning'});
      }
    },

    //提交
    submitTask(){
      const _this = this;
      if (this.taskGridCheck.length == 1){
        const arr = _this.optionsProcedure;
        for (var i in _this.optionsProcedure) {
          if (this.taskGridCheck[0].dqgx == arr[i].label) {
            this.taskGridCheck[0].dqgx = arr[i].value;
          }
        }
        let id = this.taskGridCheck[0].id;
        let gxName = this.taskGridCheck[0].dqgx;
        queryNextGxName({id:id, gxName:gxName}).then(response =>{
          var nameGx = "添加任务"
          if ( gxName==2 ){
            nameGx = "分件"
          }
          var o;
          if (nameGx==response.msg){
            if(this.taskGridCheck[0].cataloged =="是"){
              o = "当前工序 :"+nameGx+"。已是最后一道工序,是否提交!"
            }else {
              this.$message({message: '当前工序 :'+nameGx+'。已是最后一道工序，未进行目录著录，无法提交完成！', duration: 3000, type: 'error'});
              return;
            }
          }else {
            o = "当前工序："+nameGx+"，下一道工序为："+response.msg+"。是否提交!"
          }
          this.$confirm(o, '提示', {
            confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning',
          }).then(() => {
            processingSubmitPass({ajId:id, gxId:gxName}).then(response =>{
              if (response.code == 200) {
                _this.$message({message:"提交成功", type: 'success'});
                _this.subdivisionList = [];
                _this.totalSub = 0;
                _this.batchTaskQuery();
              } else {
                this.$message({message: "提交失败", type: 'error'});
              }
            })
          }).catch(() => {});
        })
      }else {
        Message.warning("请选择一条任务!");
      }
    },

    //查看记录
    viewRecord(){
      //this.dialogViewing = true;
      let gxId = "1";
      this.$nextTick(() => {
        this.$refs.ViewingRecord.init(gxId);
      });
    },

  }
}
</script>

<style scoped lang="scss">
.dashboard-editor-container {
  padding: 5px;
  width: 100%;
  height: 100%;
  background-color: rgb(240, 242, 245);
  position: relative;
  .github-corner {
    position: absolute;
    top: 0;
    border: 0;
    right: 0;
  }
  .chart-wrapper {
    background: #ffffff;
    padding: 10px 10px 0;
    margin-bottom: 10px;
    height: calc(100vh - 95px);
    border-radius: 8px;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1)
  }
}

::v-deep .el-table {
  border-right:1px solid #dfe6ec;
  color: #515a6e;
  & > .el-table__header-wrapper {
    & > table {
      tr:first-of-type {
        th {
          background: rgba(204, 204, 204, 0.18);
          color: #515a6e;
          font-size: 12px;
          //text-align: center;
          height: 34px !important;
          padding: 5px 0 !important;
        }
      }
      tr:nth-of-type(2) {
        th {
          background: #fff;
          //background: rgba(204, 204, 204, 0.05);
          color: #515a6e;
          font-size: 12px;
          text-align: center;
          padding: 0 !important;
          height: 34px;
          .el-input__inner {
            border: none;
            padding: 0;
            height: 20px;
          }
        }
      }
      & > colgroup {
        col {
          &:last-of-type {
            width: 17px !important;
          }
        }
      }
    }
  }
  .el-table__body-wrapper {
    overflow: auto !important;
    //border-right: 1px solid #dfe6ec;
    //width: calc(100% - 1px);
    .el-table__row {
      td {
        text-align: center;
        font-size: 12px;
        padding: 5px 0 !important;
        &:last-child {
          .cell {
            display: flex;
            //margin: 0 5px;
            //flex-direction: column;
            justify-content: space-around;
            width: 100%;
            white-space:nowrap;
            overflow:hidden;
            text-overflow: ellipsis;
            //padding: 0;
            .el-button {
              width: 100%;
              height: 100%;
              position: relative;
              top: 0;
              right: 0;
              //padding: 0;
              margin: 0 2px;
              //span{
              //  display: inline-block;
              //  height: 100%;
              //}
            }
          }
        }
      }
    }
  }
  //滚动条
  /**滚动条的宽度*/
  ::-webkit-scrollbar {
    width: 10px !important; /*竖向*/
    height: 10px !important; /*横向*/
  }
  /*滚动条的滑块*/
  ::-webkit-scrollbar-thumb {
    background-color: #ddd !important;
    border-radius: 8px !important;
  }
}

.page {
  float: right;
  height: 38px;
  text-align: right;
  ::v-deep .el-pagination {
    height: 28px;
    //position: relative;
    //margin-top: 5px;
    font-size: 12px;
    & > .el-pagination__total {
      font-size: 12px;
    }
    & > .el-pagination__sizes {
      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }
    button {
      background-color: transparent;
    }
    & > .el-pager {
      li {
        font-size: 12px;
        background-color: transparent;
      }
    }
    & > .el-pagination__jump {
      font-size: 12px;
      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }
  }
}

.el-form-item--small.el-form-item{
  margin-bottom: 5px;
}

.rt-input ::v-deep .el-input__inner{
  color:  #000000;
}

::v-deep .el-table tbody tr:hover>td {
  background: var(--tablebackground) !important;
}
//表格鼠标悬浮时的样式 （高亮）
::v-deep  {
  .el-table--enable-row-hover {
    .el-table__body tr {
      &:hover {
        background: rgb(223 239 253);
        border: 1px solid #313463;
      }
    }
  }
}

//弹框样式
.dialog-style {
  ::v-deep .el-dialog__body {
    padding: 10px;
  }
  ::v-deep .el-dialog__header {
    background: rgba(204, 204, 204, 0.18);
    padding: 10px;
  }
  ::v-deep .el-dialog__title {
    font-weight: 500;
    font-size: 15px
  }
  ::v-deep .el-dialog__headerbtn {
    top: 13px;
  }
  ::v-deep .el-dialog__footer {
    background: rgba(204, 204, 204, 0.18);
    padding-right: 15px;
    padding: 8px;
  }
  ::v-deep .el-button + .el-button {
    margin-left: 6px;
  }
}
// 基本信息弹框
.dialog-basic {
  margin-left: 10px;
  .form-basic {
    margin-bottom: 15px;
    line-height: 30px;
    border-bottom: 1px solid #ccc;
    margin-left: 15px;
    margin-right: 15px;
  }
}

.fenjian ::v-deep .el-dialog{
  left: 35%;
}

//弹窗样式修改
::v-deep .el-dialog {
  display: flex;
  flex-direction: column;
  margin: 0 !important;
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  max-height: calc(100% - 30px);
  max-width: calc(100% - 30px);
}

</style>

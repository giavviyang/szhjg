<template>
  <div class="description-container">
    <!--搜索框-->
    <div class="description-box">
      <el-form :model="queryForm" ref="queryForm" size="small" :inline="true" v-hasPermi="['szhjg:sjjg:mlzl:search']">
        <el-form-item label="选择批次" prop="pcId">
          <el-cascader v-model="queryForm.pcId" :options="projectOptions" :props="projectProps" clearable
                       size="mini" filterable :show-all-levels="false" @change="handleChange"
                       style="width: 160px;height: 28px;line-height: 28px;">
          </el-cascader>
        </el-form-item>
        <el-form-item label="编号" prop="bianHao">
          <el-input v-model="queryForm.bianHao" placeholder="请输入查询内容" clearable style="width: 180px" size="mini"
                    @keyup.enter.native="batchTaskSearch"/>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" icon="el-icon-search" size="mini" @click="batchTaskSearch">搜索</el-button>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" plain icon="el-icon-collection-tag" size="mini" @click="receiveTask"
                     v-hasPermi="['szhjg:sjjg:mlzl:taskReceive']" style="margin-left:30px;">领取任务
          </el-button>
          <el-button type="success" plain icon="el-icon-s-promotion" size="mini" @click="submitTask"
                     v-hasPermi="['szhjg:sjjg:mlzl:taskSub']">任务提交
          </el-button>
          <el-button type="warning" plain icon="el-icon-circle-close" size="mini" @click="submitRework"
                     v-hasPermi="['szhjg:sjjg:mlzl:taskRework']">返工
          </el-button>
          <el-button type="info" plain icon="el-icon-edit-outline" size="mini" @click="viewRecord"
                     v-hasPermi="['szhjg:sjjg:mlzl:taskRecord']">查看记录
          </el-button>
        </el-form-item>
      </el-form>
    </div>
    <!--表格-->
    <div class="description-wrapper">
      <div style="height: 40%; position: relative;">
        <div class="description-basic">案卷信息 :</div>
        <el-table border v-if="juanFrameColumns.length<=0" height="calc(100% - 50px)"></el-table>
        <el-table v-else row-key="id" :data="juanFrameList" border width="100%" height="calc(100% - 50px)"
                  ref="juanTable"
                  slot="table" @selection-change="juanSelectionChange" @row-click="juanRowClick"
                  @select="juanSelect" :row-style="juanClass">
          <el-table-column type="selection" width="40"></el-table-column>
          <el-table-column align="center" :index="juanGetIndex" type="index" label="序号" width="55"></el-table-column>
          <el-table-column align="center" v-for="(item,index) in juanFrameColumns" :key="index" :label="item.label"
                           :prop="item.prop" :min-width="item.width" :formatter="item.formatter" show-overflow-tooltip>
          </el-table-column>
          <el-table-column align="center" label="操作" width="120" fixed="right" class-name="operation">
            <template slot-scope="scope">
              <el-button type="text" size="mini" v-hasPermi="['szhjg:sjjg:mlzl:editTask']"
                         @click="descriptionTask(scope.row)">案卷著录</el-button>
            </template>
          </el-table-column>
        </el-table>
        <div class="page" style="margin-top: 5px;">
          <el-pagination :page-sizes="[20, 50, 100, 200]" :page-size="pageSizeJuan" :current-page="pageNumJuan"
                         layout="total, sizes, prev, pager, next, jumper" :total="totalJuan"
                         @size-change="pageSizeSJuan"
                         @current-change="pageCurrentJuan" :pager-count="5"/>
        </div>
      </div>
      <div style="height: 60%; position: relative;">
        <div class="description-basic">文件信息 :</div>
        <el-table border v-if="jianFrameColumns.length<=0" height="calc(100% - 60px)"></el-table>
        <el-table v-else :data="jianFrameList" border width="100%" height="calc(100% - 60px)" ref="jianTable"
                  slot="table" @select="jianSelect"
                  @selection-change="jianSelectionChange" @row-click="jianRowClick" :row-style="jianClass">
          <el-table-column align="center" type="index" label="序号" width="55" show-overflow-tooltip
                           :index="jianGetIndex"/>
          <el-table-column align="center" v-for="(item,index) in jianFrameColumns" :key="index" :label="item.label"
                           :prop="item.prop" :min-width="item.width" show-overflow-tooltip></el-table-column>
          <el-table-column align="center" label="操作" width="120" fixed="right" class-name="operation">
            <template slot-scope="scope">
              <el-button type="text" size="mini" v-hasPermi="['szhjg:sjjg:mlzl:editPiece']"
                         @click="descriptionPiece(scope.row)">文件著录</el-button>
            </template>
          </el-table-column>
        </el-table>
        <div class="page" style="margin-top: 5px;">
          <el-pagination :page-sizes="[20, 50, 100, 200]" :page-size="pageSizeJian" :current-page="pageNumJian"
                         layout="total, sizes, prev, pager, next, jumper" :total="totalJian"
                         @size-change="pageSizeSJian"
                         @current-change="pageCurrentJian" :pager-count="5"/>
        </div>
      </div>
    </div>

    <!--领取任务-->
    <ViewingReceive v-if="dialogReceive" ref="ViewingReceive" @TaskClaimCloseData="TaskClaimCloseData"></ViewingReceive>

    <!--返工-->
    <el-dialog title="返工" :visible.sync="dialogFormVisible3" width="580px" append-to-body resize remember
               class="dialog-style dialog-basic" :close-on-click-modal="false" :close-on-press-escape="false">
      <el-form ref="reworkForm" :model="reworkForm" :inline="true" :rules="reworkRules" label-width="80px">
        <el-form-item label="当前工序" prop="dqgx">
          <el-input v-model="reworkForm.dqgx" placeholder="" :disabled="true" clearable size="mini" class="rt-input"
                    style="width: 180px"/>
        </el-form-item>
        <el-form-item label="返工工序" prop="reworkId">
          <el-select v-model="reworkForm.reworkId" placeholder="选择工序" size="mini" clearable style="width: 180px">
            <el-option v-for="item in reworkIdOptions" :key="item.value" :label="item.label" :value="item.value"/>
          </el-select>
        </el-form-item>
        <br>
        <el-form-item label="返工原因" prop="reworkCause">
          <el-input v-model="reworkForm.reworkCause" type="textarea" placeholder="请输入返工原因" clearable size="mini"
                    style="width:450px" :onkeyup="reworkForm.reworkCause = reworkForm.reworkCause.replace(/\s/g,'')"/>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button size="mini" plain @click="dialogFormVisible3=false">取 消</el-button>
        <el-button size="mini" plain type="primary" @click="insertSubmitRework('reworkForm')">确 定</el-button>
      </div>
    </el-dialog>

    <!--查看记录-->
    <ViewingRecord v-if="dialogViewing" ref="ViewingRecord"></ViewingRecord>

    <!--案卷著录-->
    <el-dialog title="案卷著录" :visible.sync="dialogFormVisible1" width="720px" :close-on-click-modal="false"
               :close-on-press-escape="false" :destroy-on-close="true" :append-to-body="true"
               :before-close="handleClose1"
               class="dialog-style dialog-basic">
      <el-col :span="24" style="height: calc(100vh - 400px)">
        <div type="border-card" style="height:calc(100vh - 400px);padding: 10px;overflow: auto;">
          <el-form ref="tableTask" :model="tableTask" :inline="true" :rules="TaskRules" label-width="120px">
            <br>
            <el-form-item v-for="(item, index) in taskItemList" :label="item.label" :key="index" :prop="item.prop">
              <el-input v-if="item.type == 'input'" v-model="tableTask[item.prop]" :placeholder="item.placeholder"
                        :rules="item.rules" size="mini" style="width:200px" :ref="'input'+ index"
                        @keyup.enter.native="handelTabA(index, $event,'input')"></el-input>
              <el-select v-if="item.type == 'select'" v-model="tableTask[item.prop]" placeholder="请选择" size="mini"
                         style="width:200px" :ref="'input'+ index"
                         @keyup.enter.native="handelTabA(index, $event,'select')">
                <el-option
                  v-for="items in item.options"
                  :key="items.value"
                  :label="items.label"
                  :value="items.value"
                  :rules="items.rules">
                </el-option>
              </el-select>
              <el-date-picker v-if="item.type == 'date'" v-model="tableTask[item.prop]" clearable size="mini"
                              :placeholder="item.placeholder" type="date"
                              value-format="yyyy-MM-dd HH:mm:ss" :picker-options="pickerOptions" :rules="item.rules"
                              style="width:200px" :ref="'input'+ index" @blur="handelTabA(index, $event,'date')"/>
            </el-form-item>
          </el-form>
        </div>
      </el-col>
      <div slot="footer" class="dialog-footer">
        <el-button size="mini" plain @click="handleClose1">取 消</el-button>
        <el-button size="mini" plain type="primary" @click="insertFileDescription('tableTask')">保 存</el-button>
      </div>
    </el-dialog>

    <!--文件著录-->
    <el-dialog title="文件著录" :visible.sync="dialogFormVisible2" width="100%" :close-on-click-modal="false"
               :close-on-press-escape="false" :destroy-on-close="true" :append-to-body="true"
               :before-close="handleClose2"
               class="dialog-style dialog-basic">
      <el-col :span="4" style="height: calc(100vh - 140px);border-right: 1px solid #dfe4ed">
        <div style="height:calc(100vh - 140px);padding:10px 10px 0 10px;">
          <el-table row-key="id" :data="pictureTableList" border height="calc(100vh - 150px)" slot="table"
                    v-loading="loading"
                    ref="tablePicture" @selection-change="pictureTableSelectionChange" @row-click="pictureTableRowClick"
                    @select="pictureTableSelect" :row-style="pictureTableClass" :default-expand-all="isExpandAll"
                    :tree-props="{children: 'children', hasChildren: 'hasChildren'}">
            <el-table-column type="selection" width="40"></el-table-column>
            <el-table-column align="center" type="index" label="序号" width="50"></el-table-column>
            <el-table-column align="center" v-for="(item,index) in pictureTableColumns" :key="index" :label="item.label"
                             :prop="item.prop" :min-width="item.width" show-overflow-tooltip
                             :formatter="item.formatter">
            </el-table-column>
          </el-table>
        </div>
      </el-col>
      <el-col :span="8" style="height: calc(100vh - 140px);border-right: 1px solid #dfe4ed">
        <div type="border-card" style="height: calc(100vh - 180px);padding: 10px;overflow: auto;">
          <el-form ref="tablePapers" :model="tablePapers" :inline="true" :rules="PapersRules" label-width="120px">
            <br>
            <el-form-item v-for="(item, index) in papersItemList" :label="item.label" :key="index" :prop="item.prop">
              <el-input v-if="item.type == 'input'" v-model="tablePapers[item.prop]" :placeholder="item.placeholder"
                        :rules="item.rules" size="mini" style="width:200px" :ref="'ipt'+ index"
                        @keyup.enter.native="handelTabB(index, $event,'input')"></el-input>
              <el-select v-if="item.type == 'select'" v-model="tablePapers[item.prop]" placeholder="请选择" size="mini"
                         style="width:200px" :ref="'ipt'+ index" @keyup.enter.native="handelTabB(index, $event,'select')">
                <el-option
                  v-for="items in item.options"
                  :key="items.value"
                  :label="items.label"
                  :value="items.value"
                  :rules="items.rules">
                </el-option>
              </el-select>
              <el-date-picker v-if="item.type == 'date'" v-model="tablePapers[item.prop]" clearable size="mini"
                              :placeholder="item.placeholder" type="date"
                              value-format="yyyy-MM-dd HH:mm:ss" :picker-options="pickerOptions" :rules="item.rules"
                              style="width:200px" :ref="'ipt'+ index" @blur="handelTabB(index, $event,'date')"/>
            </el-form-item>
          </el-form>
        </div>
        <div type="border-card" style="height:40px;padding:6px;overflow:auto;text-align:center;">
          <el-button size="mini" plain type="primary" @click="insertPieceDescription('tablePapers')">保 存</el-button>
          <el-button size="mini" plain @click="handleClose2">取 消</el-button>
        </div>
      </el-col>
      <el-col :span="12" style="height: calc(100vh - 140px)">
        <div class="form-basicimg">
          <ImgViewr v-if="visible" :visible="visible" :lockScroll="false" :urls="urls" :initialIndex="index"
                    :on-show="onShow" :on-switch="changeHandle" :closeOnClickMask="false"
                    :on-close="() => (visible = false)"/>
          <div class="imgtit" v-if="urls.length>0">当前第{{ index + 1 }}张,共有{{ urls.length }}张图片</div>
          <div class="imgtit" v-else>暂无图片</div>
        </div>
      </el-col>
    </el-dialog>

  </div>
</template>

<script>
import {Message} from "element-ui";
import ViewingReceive from '@/views/szhjg/sjjg/ViewingReceive/index';
import ViewingRecord from '@/views/szhjg/sjjg/ViewingRecord/index';
import {getUserProfile} from "@/api/system/user";
import {queryDisplayGx, queryProjectBatch, selectPictureImage} from "@/api/szhjg/szhjgCommon";
import {taskDynamicListHead} from "@/api/szhjg/dynamicCommon";
import {catalogueDescriptionList} from "@/api/szhjg/dynamicCommon";
import {queryDirectory, queryCasePiece, queryPicturePiece} from "@/api/szhjg/sjjg/mlzl";
import {catalogueSubmitPass, reworkQueryProject, catalogDescriptionRework} from "@/api/szhjg/sjjg/approachCommon";
import {insertCaseFile, insertCasePiece} from "@/api/szhjg/sjjg/mlzl";
import ImgViewr, {showImages} from "vue-img-viewr";
import 'vue-img-viewr/styles/index.css';


const params = {
  pageNum: 1,
  pageSize: 20
}
export default {
  components: {ViewingReceive, ViewingRecord, ImgViewr},
  name: "index",
  data() {
    return {
      count: 0,
      //弹窗
      dialogReceive: false, //领取任务
      dialogViewing: false, //查看记录
      dialogFormVisible3: false,   //任务返工
      dialogFormVisible1: false,   //案卷著录
      dialogFormVisible2: false,   //文件著录

      //存放当前登入用户名称
      acquireNickName: '',
      // 遮罩层
      loading: true,
      //批次项目信息
      projectOptions: [],
      projectProps: {label: 'projectName', value: 'benId', children: 'pcName'},
      //搜索
      queryForm: {
        pcId: [],
        bianHao: "",
        bh: '',
      },
      //存放批次id
      batchId: '',
      //存放案卷id
      recordsId: '',
      //存放页面展示工序
      optionsProcedure: [],

      //存放动态输入框字段
      taskItemList: [],    //案卷
      tableTask: {},       //案卷存放表格字段
      TaskRules: {},       //案卷存放验证规则
      papersItemList: [],    //文件(案件)
      tablePapers: {},       //文件存放表格字段
      PapersRules: {},       //文件存放验证规则
      //时间限制
      pickerOptions: {
        disabledDate(time) {
          return time.getTime() > Date.now();
        },
      },

      /*****************************     卷级方法      ****************************************************************/
      totalJuan: 0,
      pageNumJuan: 1,
      pageSizeJuan: 20,
      //案卷复选框
      juanGridCheck: [],
      juanCheck: [],
      //列表
      juanFrameList: [],
      //表头
      juanFrameColumns: [],

      //返工
      reworkForm: {
        dqgx: '', anJuanId: '', reworkId: '', reworkCause: '',
      },
      reworkIdOptions: [],
      reworkRules: {
        reworkId: [
          {required: true, message: '返工工序不能为空', trigger: 'blur'},
        ],
        reworkCause: [
          {required: true, message: '返工原因不能为空', trigger: 'blur'},
          {min: 0, max: 300, message: '输入内容长度不得超过300', trigger: 'blur'}
        ]
      },


      /*****************************     件级方法      ****************************************************************/
      JianDaType: '',
      JianNameId: '',
      totalJian: 0,
      pageNumJian: 1,
      pageSizeJian: 20,
      //文件复选框
      jianGridCheck: [],
      //列表
      jianFrameList: [],
      //表头
      jianFrameColumns: [],

      //文件图片表格
      isExpandAll: false,         //是否展开，默认全部折叠
      pictureTableGridCheck: [],  //案件复选框
      pictureTableList: [],
      pictureTableColumns: [
        {label: '页码', prop: 'ym', width: '50'},
        {label: '页数', prop: 'ys', width: '50'},
        /*{label: '是否首页', prop: 'sfsy', width: '80', formatter: function (row, column, cellValue) {
            return cellValue === '是' ? '是' : '';}
        },*/
      ],

      //图像
      urls: [],
      index: 0,
      visible: false,

    }
  },

  created() {
    this.getOptionsData();
    this.queryGxOptions();
    this.getNickName();
  },
  mounted() {
  },

  watch: {
    projectOptions(val) {
      this.queryForm.pcId = val[0].benId
      if (val[0].pcName.length > 0) {
        this.queryForm.pcId = [val[0].benId, val[0].pcName[0].benId]
      }
      this.getTableHeaders(this.queryForm.pcId[1]);
      params.pcId = this.queryForm.pcId[1];
      this.queryTaskNameList(params);
      this.batchId = this.queryForm.pcId[1];
      this.getTaskCatalogueForm(this.queryForm.pcId[1]);
      this.getPapersCatalogueForm(this.queryForm.pcId[1]);
    }
  },
  computed: {},
  methods: {
    //弹窗跳转
    handelTabA(i, e, type) {
      let that = this
      if (type === 'input') {
        that.$nextTick(() => {
          e.target.blur();
          i++;
          if (that.$refs['input' + i]) {
            that.$refs['input' + i][0].focus()
          } else {
            return
          }
        })
      } else if (type === 'select') {
        this.count++;
        this.$refs['input' + i][0].visible = true;
        if (this.count === 2) {
          i++;
          this.count = 0;
          if (this.$refs['input' + i]) {
            this.$refs['input' + (i - 1)][0].visible = false;
            this.$refs['input' + i][0].focus()
          } else {
            return
          }
        }
      } else if (type === 'date') {
        that.$nextTick(() => {
          i++;
          if (that.$refs['input' + i]) {
            that.$refs['input' + i][0].focus()
          } else {
            return
          }
        })
      }
    },
    handelTabB(i, e, type) {
      let that = this
      if (type === 'input') {
        that.$nextTick(() => {
          e.target.blur();
          i++;
          if (that.$refs['ipt' + i]) {
            that.$refs['ipt' + i][0].focus()
          } else {
            return
          }
        })
      } else if (type === 'select') {
        this.count++;
        this.$refs['ipt' + i][0].visible = true;
        if (this.count === 2) {
          i++;
          this.count = 0;
          if (this.$refs['ipt' + i]) {
            this.$refs['ipt' + (i - 1)][0].visible = false;
            this.$refs['ipt' + i][0].focus()
          } else {
            return
          }
        }
      } else if (type === 'date') {
        that.$nextTick(() => {
          i++;
          if (that.$refs['ipt' + i]) {
            that.$refs['ipt' + i][0].focus()
          } else {
            return
          }
        })
      }
    },
    //查询当前登入用户
    getNickName() {
      getUserProfile().then(response => {
        this.acquireNickName = response.data.nickName
      });
    },
    //默认查询项目批次
    getOptionsData() {
      queryProjectBatch({gxId: 7}).then((res) => {
        this.projectOptions = res.data;
      })
    },
    //查询页面动态展示工序
    queryGxOptions() {
      queryDisplayGx().then(res => {
        this.optionsProcedure = res.map((item) => {
          return item;
        });
      });
    },

    //切换项目批次之后进行查询
    handleChange(value) {
      this.juanFrameColumns = [];
      this.juanFrameList = [];
      this.jianFrameColumns = [];
      this.jianFrameList = [];
      this.getTableHeaders(value[1]);
      params.pcId = value[1];
      this.queryTaskNameList(params);
      this.batchId = value[1];
      this.getTaskCatalogueForm(value[1]);
      this.getPapersCatalogueForm(value[1]);
    },
    //查询动态表头展示字段
    getTableHeaders(dynamic) {
      taskDynamicListHead({headBatch: dynamic, headPoints: 0, headType: 0}).then((res) => {
        this.juanFrameColumns = res.data;
        //获取案件字段
        taskDynamicListHead({headBatch: dynamic, headPoints: 1, headType: 0}).then((res) => {
          this.jianFrameColumns = res.data;
        })
      });
    },
    //查询获取动态录入表单内容--(案卷)
    getTaskCatalogueForm(dynamic) {
      this.taskItemList = []
      this.TaskRules = {}
      catalogueDescriptionList({headBatch: dynamic, headPoints: 0}).then((res) => {
        this.taskItemList = res.data;
        // 根据后台返回的数据生成表单和验证规则
        this.taskItemList.forEach(item => {
          this.$set(this.tableTask, item.prop, ''); // 设置表单数据默认值
          let currentRules = [];
          if (item.isRequired) {
            currentRules.push({required: true, message: `${item.label}不能为空`, trigger: 'blur'})
          }
          if (item.max || item.min) {
            if (item.pattern) {
              let charLength = item.pattern.replace(/[^0-9]/ig, "")
              currentRules.push({
                pattern: new RegExp(item.pattern.substr(1, item.pattern.length - 2)),
                message: `输入内容不符合规则`,
                trigger: 'blur'
              });
            } else {
              currentRules.push({
                min: item.min,
                max: item.max,
                message: `${item.label}长度在 ${item.min} 到 ${item.max} 个字符`,
                trigger: 'blur'
              });
            }
          }
          if (currentRules.length > 0) {
            this.$set(this.TaskRules, item.prop, currentRules); // 设置验证规则
          }
        })
      })
    },
    //查询获取动态录入表单内容--(文件)
    getPapersCatalogueForm(dynamic) {
      this.papersItemList = []
      this.PapersRules = {}
      catalogueDescriptionList({headBatch: dynamic, headPoints: 1}).then((res) => {
        this.papersItemList = res.data
        // 根据后台返回的数据生成表单和验证规则
        this.papersItemList.forEach(item => {
          this.$set(this.tablePapers, item.prop, ''); // 设置表单数据默认值
          let currentRules = [];
          if (item.isRequired) {
            currentRules.push({required: true, message: `${item.label}不能为空`, trigger: 'blur'})
          }
          if (item.max || item.min) {
            if (item.pattern) {
              let charLength = item.pattern.replace(/[^0-9]/ig, "")
              currentRules.push({
                pattern: new RegExp(item.pattern.substr(1, item.pattern.length - 2)),
                message: `输入内容不符合规则`,
                trigger: 'blur'
              });
            } else {
              currentRules.push({
                min: item.min,
                max: item.max,
                message: `${item.label}长度在 ${item.min} 到 ${item.max} 个字符`,
                trigger: 'blur'
              });
            }
          }
          if (currentRules.length > 0) {
            this.$set(this.PapersRules, item.prop, currentRules); // 设置验证规则
          }
        })
      })
    },


    /*****************************     案卷方法      *******************************************************************/
    //搜索
    batchTaskSearch() {
      let params = {
        pageNum: 1,
        pageSize: 20,
        pcId: this.queryForm.pcId[1],
        bh: this.queryForm.bianHao,
      }
      this.queryTaskNameList(params);
    },
    queryTaskNameList(params) {
      const _this = this;
      queryDirectory(params, {emulateJSON: true}).then(function (response) {
        if (response.rows != undefined && response.rows != "" && response.rows != null) {
          response.rows.forEach((value, index) => {
            const arr = _this.optionsProcedure;
            for (var i in arr) {
              if (value.dqgx == arr[i].value) {
                value.dqgx = arr[i].label;
              }
            }
          })
        }
        _this.juanFrameList = response.rows;
        _this.totalJuan = response.total;
        _this.loading = false;
      })
    },
    // 分页
    pageCurrentJuan(val) {
      this.pageNumJuan = val
      params.pageNum = val
      params.pageSize = this.pageSizeJuan;
      params.pcId = this.queryForm.pcId[1];
      params.bh = this.queryForm.bianHao;
      this.queryTaskNameList(params)
    },
    pageSizeSJuan(val) {
      this.pageSizeJuan = val
      params.pageSize = val;
      params.pageNum = this.pageNumJuan;
      params.pcId = this.queryForm.pcId[1];
      params.bh = this.queryForm.bianHao;
      this.queryTaskNameList(params)
    },

    //复选框事件
    juanSelectionChange(val) {
      this.juanGridCheck = val;
      this.juanCheck = val.map(item => item.id)
      if (this.juanGridCheck.length == 1) {
        this.JianNameId = this.juanGridCheck[0].lqr;
        this.JianDaType = this.juanGridCheck[0].dalx;
        this.queryCaseList(this.juanGridCheck[0].id);
      }
    },
    //行点击事件
    juanRowClick(row, column, event) {
      this.$refs.juanTable.clearSelection();
      if (this.juanGridCheck.length === 0) {
        this.$refs.juanTable.toggleRowSelection(row)
        return;
      }
      this.$refs.juanTable.toggleRowSelection(row)
    },
    async juanSelect(selection, row) {
      // 执行完清空操作在进行下面的勾选
      await this.$refs.juanTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.juanTable.toggleRowSelection(row, true);
    },
    juanClass({row, rowIndex}) {
      if (this.juanGridCheck.includes(row)) {
        return {"background": "#b9deff !important", "color": "blue",}
      } else {
        return {"——tablebackground": "#F5F7FA",}
      }
    },
    //翻页后序号连贯
    juanGetIndex($index) {
      return (this.pageNumJuan - 1) * this.pageSizeJuan + $index + 1;
    },

    //领取任务
    receiveTask() {
      this.dialogReceive = true;
      let gxId = "7";
      this.$nextTick(() => {
        this.$refs.ViewingReceive.init(gxId);
      });
    },
    //关闭页面弹窗重新刷新
    TaskClaimCloseData(val) {
      this.batchTaskSearch();
    },
    //任务提交
    submitTask() {
      const _this = this;
      if (this.juanGridCheck.length == 1) {
        let a = this.juanGridCheck[0].id;
        this.$confirm('当前工序 :目录著录。是否提交！', '提示', {
          confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning',
        }).then(() => {
          catalogueSubmitPass({ajId: a}).then(response => {
            if (response.code == 200) {
              _this.$message({message: "提交成功", type: 'success'})
              _this.batchTaskSearch();
              _this.jianFrameList = [];
              _this.totalSub = 0;
            } else {
              this.$message({message: "提交失败", type: 'error'});
            }
          })
        }).catch(() => {
        });
      } else {
        Message.warning("请选择一条任务!");
      }
    },
    //任务返工
    submitRework() {
      if (this.juanGridCheck.length == 1) {
        this.dialogFormVisible3 = true;
        let anJuanId = this.juanGridCheck[0].id;
        this.reworkForm.anJuanId = anJuanId;
        reworkQueryProject({ajId: anJuanId}).then(res => {
          this.reworkIdOptions = res.map((item) => {
            return item
          });
          this.reworkForm.dqgx = this.juanGridCheck[0].dqgx;
        });
      } else {
        Message.warning("请选择一条任务!");
      }
    },
    insertSubmitRework(reworkForm) {
      const _this = this;
      this.$refs["reworkForm"].validate((valid) => {
        if (valid) {
          catalogDescriptionRework(this.reworkForm).then(response => {
            if (response.code == 200) {
              _this.$message({message: "返工提交成功", type: 'success'})
              _this.batchTaskSearch();
              _this.jianFrameList = [];
              _this.totalSub = 0;
              _this.dialogFormVisible3 = false;
            } else {
              this.$message({message: "返工提交失败", type: 'error'});
            }
          })
        } else {
          return false;
        }
      })
    },
    //查看记录
    viewRecord() {
      this.dialogViewing = true;
      let gxId = "7";
      this.$nextTick(() => {
        this.$refs.ViewingRecord.init(gxId);
      });
    },


    /*****************************     文件方法      *******************************************************************/
    queryCaseList(val) {
      let params = {
        pageNum: 1,
        pageSize: 20,
        ajId: val,
      }
      this.queryPieceList(params)
    },
    // 分页
    pageCurrentJian(val) {
      this.pageNumJian = val
      params.pageNum = val
      params.pageSize = this.pageSizeJian;
      this.queryPieceList(params)
    },
    pageSizeSJian(val) {
      this.pageSizeJian = val
      params.pageSize = val;
      params.pageNum = this.pageNumJian;
      this.queryPieceList(params)
    },
    queryPieceList(params) {
      const _this = this;
      queryCasePiece(params, {emulateJSON: true}).then(function (response) {
        _this.jianFrameList = response.rows;
        _this.totalJian = response.total;
        _this.loading = false;
      })
    },

    //复选框事件
    jianSelectionChange(val) {
      this.jianGridCheck = val;
    },
    //行点击事件
    jianRowClick(row, column) {
      this.$refs.jianTable.clearSelection();
      if (this.jianGridCheck.length === 0) {
        this.$refs.jianTable.toggleRowSelection(row)
        return;
      }
      this.$refs.jianTable.toggleRowSelection(row)
    },
    async jianSelect(selection, row) {
      // 执行完清空操作在进行下面的勾选
      await this.$refs.jianTable.clearSelection();
      if (selection.length === 0) return;
      this.$refs.jianTable.toggleRowSelection(row, true);
    },
    jianClass({row, rowIndex}) {
      if (this.jianGridCheck.includes(row)) {
        return {"background": "#b9deff !important", "color": "blue",}
      } else {
        return {"——tablebackground": "#F5F7FA",}
      }
    },
    //翻页后序号连贯
    jianGetIndex($index) {
      //表格序号
      return (this.pageNumJian - 1) * this.pageSizeJian + $index + 1;
    },


    /*****************************     著录方法      *******************************************************************/
    //案卷著录
    descriptionTask(val) {
      this.tableTask = val;
      this.dialogFormVisible1 = true;
      //console.log(this.taskItemList)
      if (this.dialogFormVisible1) {
        this.$nextTick(() => {
          // console.log('111',this.$refs.input4)
          if (this.$refs.input0[0]) {
            this.$refs.input0[0].focus();
          }

        })

      }

    },
    insertFileDescription(tableTask) {
      const _this = this;
      this.$refs["tableTask"].validate((valid) => {
        if (valid) {
          const arr = _this.optionsProcedure;
          for (var i in _this.optionsProcedure) {
            if (this.juanGridCheck[0].dqgx == arr[i].label) {
              this.juanGridCheck[0].dqgx = arr[i].value;
            }
          }
          insertCaseFile(this.tableTask).then(response => {
            if (response.code == "200") {
              _this.$message({message: "案卷著录成功", type: 'success'});
              _this.batchTaskSearch();
              _this.dialogFormVisible1 = false;
            } else {
              this.$message({message: "案卷著录失败", type: 'error'});
            }
          })
        } else {
          return false;
        }
      })
    },
    //案卷著录取消按钮
    handleClose1() {
      this.dialogFormVisible1 = false;
    },

    //文件著录
    descriptionPiece(val) {
      this.queryPictureList(val)
      this.getImage(val)
      this.tablePapers = val;
      this.dialogFormVisible2 = true;
      if (this.dialogFormVisible2) {
        this.$nextTick(() => {
          if (this.$refs.ipt0[0]) {
            this.$refs.ipt0[0].focus();
          }
        })
      }
    },
    insertPieceDescription(tablePapers) {
      const _this = this;
      this.$refs["tablePapers"].validate((valid) => {
        if (valid) {
          insertCasePiece(this.tablePapers).then(response => {
            if (response.code == "200") {
              _this.$message({message: "文件著录成功", type: 'success'});
              _this.dialogFormVisible2 = false;
            } else {
              this.$message({message: "文件著录失败", type: 'error'});
            }
          })
        } else {
          return false;
        }
      })
    },
    //文件著录取消按钮
    handleClose2() {
      this.dialogFormVisible2 = false;
    },

    /*****************   文件查询图片列表方法     ************************/
    //查询
    queryPictureList(val) {
      const _this = this
      let params = {
        ajId: val.ajId,
        jh: val.jh,
      }
      queryPicturePiece(params, {emulateJSON: true}).then(function (response) {
        _this.pictureTableList = response.rows;
        _this.loading = false;
      })
    },
    //复选框事件
    pictureTableSelectionChange(val) {
      this.pictureTableGridCheck = val;
      if (this.pictureTableGridCheck.length == 1) {
        if (this.pictureTableGridCheck[0].sfsy === "是") {
          this.getImage(this.pictureTableGridCheck[0]);
        } else {
          this.leafletImage(this.pictureTableGridCheck[0]);
        }
      }
    },
    //行点击事件
    pictureTableRowClick(row, column) {
      this.$refs.tablePicture.clearSelection();
      if (this.pictureTableGridCheck.length === 0) {
        this.$refs.tablePicture.toggleRowSelection(row)
        return;
      }
      this.$refs.tablePicture.toggleRowSelection(row)
    },
    async pictureTableSelect(selection, row) {
      // 执行完清空操作在进行下面的勾选
      await this.$refs.tablePicture.clearSelection();
      if (selection.length === 0) return;
      this.$refs.tablePicture.toggleRowSelection(row, true);
    },
    pictureTableClass({row, rowIndex}) {
      if (this.pictureTableGridCheck.includes(row)) {
        return {"background": "#b9deff !important", "color": "blue",}
      } else {
        return {"——tablebackground": "#F5F7FA",}
      }
    },


    /*****************************     图片方法      *******************************************************************/
    // 通过组件方式
    showImagesByComponent(index) {
      this.visible = true
      this.index = index | 0
    },
    onShow(isShow) {
      //console.log(isShow)
    },
    changeHandle(i) {
      this.index = i
      //console.log(`current image index: ${i}`)
    },
    showImagesByJs(index) {
      // 通过js方式显示
      showImages({
        urls: this.urls,
        index,
        onShow: this.onShow,
        /*onClose: () => {
          console.log('close with js')
          return true
        },*/
      })
    },
    //查看图片
    getImage(row) {
      selectPictureImage({jh: row.jh, ajId: row.ajId}).then((res) => {
        this.urls = res.data.imgs.map((item, index) => {
          return `${process.env.VUE_APP_BASE_API}/szhjgCommonController/ioReadImg2?url=${encodeURIComponent(item)}`;
        });
        this.showImagesByComponent()
      })
    },
    //查看单张图片
    leafletImage(row) {
      this.urls = [`${process.env.VUE_APP_BASE_API}/szhjgCommonController/ioReadImg2?url=${encodeURIComponent(row.tpdz)}`];
      this.showImagesByComponent();
    },

  }

}
</script>

<style scoped lang="scss">
.description-container {
  padding: 10px;
  width: 100%;
  height: 100%;
  position: relative;

  .github-corner {
    position: absolute;
    top: 0;
    border: 0;
    right: 0;
  }

  .description-box {
    width: 1000px;
    height: 38px;
    padding: 3px 0 3px 0;
    border-radius: 8px;
    //margin-bottom: 6px;
    //background-color: #f0f0f0;
    .el-form-item--small.el-form-item {
      margin-bottom: 5px;
    }
  }

  .description-wrapper {
    width: 100%;
    height: calc(100% - 38px);
    //background-color: #f0f0f0;
    .description-basic {
      //padding-left: 10px;
      //margin-bottom: 5px;
      line-height: 20px;
      font-size: 14px;
      font-weight: bold;
    }
  }
}

::v-deep .el-table {
  //border-right: 1px solid #dfe6ec;
  border: 1px solid #dfe6ec;
  color: #515a6e;
  th {
    height: 34px !important;
  }
  & > .el-table__header-wrapper {
    & > table {
      tr:first-of-type {
        th {
          background: rgba(204, 204, 204, 0.18);
          color: #515a6e;
          font-size: 12px;
          text-align: center;
          height: 34px !important;
          padding: 5px 0 !important;
          border-right: 1px solid #dfe6ec;
        }
      }
      tr:nth-of-type(2) {
        th {
          background: #fff;
          color: #515a6e;
          font-size: 12px;
          text-align: center;
          padding: 0 !important;
          height: 34px;
          .el-input__inner {
            border: none;
            padding: 0;
            height: 20px;
          }
          .el-input__suffix {
            width: 12px;
            .el-input__icon {
              //line-height: 23px;
            }
          }
        }
      }
      //& > colgroup {
      //  col {
      //    &:last-of-type {
      //      width: 17px !important;
      //    }
      //  }
      //}
    }
  }
  .el-table__body-wrapper {
    //overflow: auto !important;
    .el-table__row {
      td {
        text-align: center;
        padding: 5px 0 !important;
        font-size: 12px;
        border-right: 1px solid #dfe6ec;
        .el-input.is-disabled .el-input__inner {
          color: #606266;
        }
        .el-radio {
          margin-right: 20px;
          font-size: 12px;
          .el-radio__input {
            .el-radio__inner {
              width: 10px;
              height: 10px;
            }
          }
          .el-radio__label {
            font-size: 12px;
            padding-left: 5px;
            font-weight: 400;
          }
        }
        .el-radio:last-of-type {
          margin-right: 0;
        }
      }
      .textLeft {
        text-align: left;
      }
      .el-table-column--selection {
        .cell {
          padding-right: 10px;
        }
      }
      .operation {
        .cell {
          display: flex;
          justify-content: space-around;
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          .el-button {
            //width: 100%;
            height: 100%;
            position: relative;
            top: 0;
            right: 0;
            margin: 0 2px;
            font-size: 12px;
          }
        }
      }
    }
    .small-padding {
      .cell {
        color: #515a6e;
      }
    }
    .noticeType {
      .el-tag {
        background-color: transparent;
        color: #515a6e;
        border: none;
      }
    }
  }

  .el-table__fixed {
    height: 100% !important; //设置高优先，以覆盖内联样式
  }
  .el-table__fixed-right {
    height: 100%;
    .el-table__fixed-header-wrapper {
      .operation {
        .cell {
          text-align: center;
          color: #515a6e;
        }
      }
    }
    .el-table__fixed-body-wrapper {
      .operation {
        padding:5px;
        .cell {
          display: flex;
          justify-content: space-around;
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          //color: #515a6e;
          .el-button {
            //width: 100%;
            height: 100%;
            position: relative;
            top: 0;
            right: 0;
            margin: 0 2px;
            font-size: 12px;
          }
        }
      }
    }
  }
  .el-table__cell {
    padding:0 ;
  }
  .cell{
    line-height: 19px;
  }
}
.el-table--medium{
  .el-table__cell {
    padding:0;
  }
}
/*::v-deep .el-table {
  border-right: 1px solid #dfe6ec;
  color: #515a6e;

  & > .el-table__header-wrapper {
    & > table {
      tr:first-of-type {
        th {
          background: rgba(204, 204, 204, 0.18);
          color: #515a6e;
          font-size: 12px;
          //text-align: center;
          height: 34px !important;
          padding: 5px 0 !important;
        }
      }

      tr:nth-of-type(2) {
        th {
          background: #fff;
          //background: rgba(204, 204, 204, 0.05);
          color: #515a6e;
          font-size: 12px;
          text-align: center;
          padding: 0 !important;
          height: 34px;

          .el-input__inner {
            border: none;
            padding: 0;
            height: 20px;
          }
        }
      }

      //& > colgroup {
      //  col {
      //    &:last-of-type {
      //      width: 17px !important;
      //    }
      //  }
      //}
    }
  }

  .el-table__body-wrapper {
    overflow: auto !important;
    //border-right: 1px solid #dfe6ec;
    //width: calc(100% - 1px);
    .el-table__row {
      td {
        text-align: center;
        font-size: 12px;
        padding: 5px 0 !important;

        &:last-child {
          .cell {
            display: flex;
            //margin: 0 5px;
            //flex-direction: column;
            justify-content: space-around;
            width: 100%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            //padding: 0;
            .el-button {
              width: 100%;
              height: 100%;
              position: relative;
              top: 0;
              right: 0;
              //padding: 0;
              margin: 0 2px;
              //span{
              //  display: inline-block;
              //  height: 100%;
              //}
            }
          }
        }
      }
    }
  }

  //滚动条
  !**滚动条的宽度*!
  ::-webkit-scrollbar {
    width: 10px !important; !*竖向*!
    height: 10px !important; !*横向*!
  }

  !*滚动条的滑块*!
  ::-webkit-scrollbar-thumb {
    background-color: #ddd !important;
    border-radius: 8px !important;
  }
}*/

.page {
  float: right;
  height: 38px;
  text-align: right;

  ::v-deep .el-pagination {
    height: 28px;
    //position: relative;
    //margin-top: 5px;
    font-size: 12px;

    & > .el-pagination__total {
      font-size: 12px;
    }

    & > .el-pagination__sizes {
      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }

    button {
      background-color: transparent;
    }

    & > .el-pager {
      li {
        font-size: 12px;
        background-color: transparent;
      }
    }

    & > .el-pagination__jump {
      font-size: 12px;

      .el-input {
        input {
          font-size: 12px;
          height: 26px;
        }
      }
    }
  }
}

::v-deep .el-table tbody tr:hover > td {
  background: var(--tablebackground) !important;
}

//表格鼠标悬浮时的样式 （高亮）
::v-deep {
  .el-table--enable-row-hover {
    .el-table__body tr {
      &:hover {
        background: rgb(223 239 253);
        border: 1px solid #313463;
      }
    }
  }
}

//弹框样式
.dialog-style {
  ::v-deep .el-dialog__body {
    padding: 0;
  }

  ::v-deep .el-dialog__header {
    background: rgba(204, 204, 204, 0.18);
    padding: 10px;
  }

  ::v-deep .el-dialog__title {
    font-weight: 500;
    font-size: 15px
  }

  ::v-deep .el-dialog__headerbtn {
    top: 13px;
  }

  ::v-deep .el-dialog__footer {
    background: rgba(204, 204, 204, 0.18);
    padding-right: 15px;
    padding: 8px;
  }

  ::v-deep .el-button + .el-button {
    margin-left: 6px;
  }
}

// 基本信息弹框
.dialog-basic {
  margin-left: 10px;

  .form-basic {
    //margin-bottom: 5px;
    line-height: 25px;
    //border-bottom: 1px solid #ccc;
    //margin-left: 15px;
    //margin-right: 15px;
    font-size: 14px;
    font-weight: bold;
  }

  .form-basicimg {
    position: relative;
    height: 100%;
    //margin-bottom: 5px;
    line-height: 25px;
    //border-bottom: 1px solid #ccc;
    //margin-left: 15px;
    //margin-right: 15px;
    font-size: 14px;
    font-weight: bold;

    .img-viewr__wrapper {
      position: absolute;
    }

    ::v-deep .icon__circle-close {
      display: none;
    }

    ::v-deep .img-viewr__canvas {
      overflow: hidden;
    }

    .imgs {
      display: flex;
    }

    .img {
      width: 150px;
      height: 100px;
      border: 1px solid #EEE;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 20px;
    }

    .img img {
      max-width: 100%;
      max-height: 100%;
      cursor: pointer;
    }

    .imgtit {
      position: absolute;
      width: 100%;
      z-index: 999999;
      text-align: center;
      bottom: 5px;
      font-size: 17px;
      font-weight: 700;
      text-shadow: -1px 1px 0 #fff, 1px 1px 0 #fff, 1px -1px 0 #fff, -1px -1px 0 #fff;
    }
  }
}

//弹窗样式修改
::v-deep .el-dialog {
  display: flex;
  flex-direction: column;
  margin: 0 !important;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  max-height: calc(100% - 30px);
  max-width: calc(100% - 30px);
}

//禁止输入框输入,字体颜色黑色
.rt-input ::v-deep .el-input__inner {
  color: #000000;
}

</style>
